{
  "version": 3,
  "sources": ["../src/deferrable.ts"],
  "sourcesContent": ["import isEqual from 'lodash/isEqual';\nimport type { AbstractQueryGenerator } from './dialects/abstract/query-generator.js';\nimport { classToInvokable } from './utils/class-to-invokable.js';\nimport { EMPTY_ARRAY } from './utils/object.js';\n\n/**\n * Can be used to\n * make foreign key constraints deferrable and to set the constaints within a\n * transaction. This is only supported in PostgreSQL.\n *\n * The foreign keys can be configured like this. It will create a foreign key\n * that will check the constraints immediately when the data was inserted.\n *\n * ```js\n * class MyModel extends Model {}\n * MyModel.init({\n *   foreign_id: {\n *     type: DataTypes.INTEGER,\n *     references: {\n *       model: OtherModel,\n *       key: 'id',\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\n *     }\n *   }\n * }, { sequelize });\n * ```\n *\n * The constraints can be configured in a transaction like this. It will\n * trigger a query once the transaction has been started and set the constraints\n * to be checked at the very end of the transaction.\n *\n * ```js\n * sequelize.transaction({\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\n * });\n * ```\n */\nexport class Deferrable {\n  toString() {\n    return this.constructor.name;\n  }\n\n  toSql(_queryGenerator: AbstractQueryGenerator) {\n    throw new Error('toSql implementation missing');\n  }\n\n  isEqual(_other: unknown): boolean {\n    throw new Error('isEqual implementation missing');\n  }\n\n  static readonly INITIALLY_DEFERRED = classToInvokable(class INITIALLY_DEFERRED extends Deferrable {\n    toSql() {\n      return INITIALLY_DEFERRED.toSql();\n    }\n\n    static toSql() {\n      return 'DEFERRABLE INITIALLY DEFERRED';\n    }\n\n    isEqual(other: unknown): boolean {\n      return other instanceof INITIALLY_DEFERRED;\n    }\n  });\n\n  static readonly INITIALLY_IMMEDIATE = classToInvokable(class INITIALLY_IMMEDIATE extends Deferrable {\n    toSql() {\n      return INITIALLY_IMMEDIATE.toSql();\n    }\n\n    isEqual(other: unknown): boolean {\n      return other instanceof INITIALLY_IMMEDIATE;\n    }\n\n    static toSql() {\n      return 'DEFERRABLE INITIALLY IMMEDIATE';\n    }\n  });\n\n  /**\n   * Will set the constraints to not deferred. This is the default in PostgreSQL and it make\n   * it impossible to dynamically defer the constraints within a transaction.\n   */\n  static readonly NOT = classToInvokable(class NOT extends Deferrable {\n    toSql() {\n      return NOT.toSql();\n    }\n\n    isEqual(other: unknown): boolean {\n      return other instanceof NOT;\n    }\n\n    static toSql() {\n      return 'NOT DEFERRABLE';\n    }\n  });\n\n  // TODO: move the following classes to their own namespace, as they are not related to the above classes\n  //  the ones above are about configuring a constraint's deferrability when defining the constraint.\n  //  The ones below are for configuring them during a transaction\n  /**\n   * Will trigger an additional query at the beginning of a\n   * transaction which sets the constraints to deferred.\n   */\n  static readonly SET_DEFERRED = classToInvokable(class SET_DEFERRED extends Deferrable {\n    readonly #constraints: readonly string[];\n\n    /**\n     * @param constraints An array of constraint names. Will defer all constraints by default.\n     */\n    constructor(constraints: readonly string[] = EMPTY_ARRAY) {\n      super();\n      this.#constraints = Object.freeze([...constraints]);\n    }\n\n    toSql(queryGenerator: AbstractQueryGenerator): string {\n      return queryGenerator.setDeferredQuery(this.#constraints);\n    }\n\n    isEqual(other: unknown): boolean {\n      return other instanceof SET_DEFERRED && isEqual(this.#constraints, other.#constraints);\n    }\n\n    static toSql(queryGenerator: AbstractQueryGenerator): string {\n      return queryGenerator.setDeferredQuery(EMPTY_ARRAY);\n    }\n  });\n\n  /**\n   * Will trigger an additional query at the beginning of a\n   * transaction which sets the constraints to immediately.\n   */\n  static readonly SET_IMMEDIATE = classToInvokable(class SET_IMMEDIATE extends Deferrable {\n    readonly #constraints: readonly string[];\n\n    /**\n     * @param constraints An array of constraint names. Will defer all constraints by default.\n     */\n    constructor(constraints: readonly string[] = EMPTY_ARRAY) {\n      super();\n      this.#constraints = Object.freeze([...constraints]);\n    }\n\n    toSql(queryGenerator: AbstractQueryGenerator): string {\n      return queryGenerator.setImmediateQuery(this.#constraints);\n    }\n\n    isEqual(other: unknown): boolean {\n      return other instanceof SET_IMMEDIATE && isEqual(this.#constraints, other.#constraints);\n    }\n\n    static toSql(queryGenerator: AbstractQueryGenerator): string {\n      return queryGenerator.setImmediateQuery(EMPTY_ARRAY);\n    }\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AAEpB,gCAAiC;AACjC,oBAA4B;AAkCrB,MAAM,WAAW;AAAA,EACtB,WAAW;AACT,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEA,MAAM,iBAAyC;AAC7C,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AAAA,EAEA,QAAQ,QAA0B;AAChC,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AAAA,EAEA,OAAgB,yBAAqB,4CAAiB,MAAM,2BAA2B,WAAW;AAAA,IAChG,QAAQ;AACN,aAAO,mBAAmB,MAAM;AAAA,IAClC;AAAA,IAEA,OAAO,QAAQ;AACb,aAAO;AAAA,IACT;AAAA,IAEA,QAAQ,OAAyB;AAC/B,aAAO,iBAAiB;AAAA,IAC1B;AAAA,EACF,CAAC;AAAA,EAED,OAAgB,0BAAsB,4CAAiB,MAAM,4BAA4B,WAAW;AAAA,IAClG,QAAQ;AACN,aAAO,oBAAoB,MAAM;AAAA,IACnC;AAAA,IAEA,QAAQ,OAAyB;AAC/B,aAAO,iBAAiB;AAAA,IAC1B;AAAA,IAEA,OAAO,QAAQ;AACb,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAgB,UAAM,4CAAiB,MAAM,YAAY,WAAW;AAAA,IAClE,QAAQ;AACN,aAAO,IAAI,MAAM;AAAA,IACnB;AAAA,IAEA,QAAQ,OAAyB;AAC/B,aAAO,iBAAiB;AAAA,IAC1B;AAAA,IAEA,OAAO,QAAQ;AACb,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASD,OAAgB,mBAAe,4CAAiB,MAAM,qBAAqB,WAAW;AAAA,IAC3E;AAAA;AAAA;AAAA;AAAA,IAKT,YAAY,cAAiC,2BAAa;AACxD,YAAM;AACN,WAAK,eAAe,OAAO,OAAO,CAAC,GAAG,WAAW,CAAC;AAAA,IACpD;AAAA,IAEA,MAAM,gBAAgD;AACpD,aAAO,eAAe,iBAAiB,KAAK,YAAY;AAAA,IAC1D;AAAA,IAEA,QAAQ,OAAyB;AAC/B,aAAO,iBAAiB,oBAAgB,eAAAA,SAAQ,KAAK,cAAc,MAAM,YAAY;AAAA,IACvF;AAAA,IAEA,OAAO,MAAM,gBAAgD;AAC3D,aAAO,eAAe,iBAAiB,yBAAW;AAAA,IACpD;AAAA,EACF,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMD,OAAgB,oBAAgB,4CAAiB,MAAM,sBAAsB,WAAW;AAAA,IAC7E;AAAA;AAAA;AAAA;AAAA,IAKT,YAAY,cAAiC,2BAAa;AACxD,YAAM;AACN,WAAK,eAAe,OAAO,OAAO,CAAC,GAAG,WAAW,CAAC;AAAA,IACpD;AAAA,IAEA,MAAM,gBAAgD;AACpD,aAAO,eAAe,kBAAkB,KAAK,YAAY;AAAA,IAC3D;AAAA,IAEA,QAAQ,OAAyB;AAC/B,aAAO,iBAAiB,qBAAiB,eAAAA,SAAQ,KAAK,cAAc,MAAM,YAAY;AAAA,IACxF;AAAA,IAEA,OAAO,MAAM,gBAAgD;AAC3D,aAAO,eAAe,kBAAkB,yBAAW;AAAA,IACrD;AAAA,EACF,CAAC;AACH;",
  "names": ["isEqual"]
}
