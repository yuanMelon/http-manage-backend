{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query-generator-typescript.ts"],
  "sourcesContent": ["import type { Expression } from '../../sequelize';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { buildJsonPath } from '../../utils/json';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type { EscapeOptions, RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MsSqlQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  describeTableQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT',\n      `c.COLUMN_NAME AS 'Name',`,\n      `c.DATA_TYPE AS 'Type',`,\n      `c.CHARACTER_MAXIMUM_LENGTH AS 'Length',`,\n      `c.IS_NULLABLE as 'IsNull',`,\n      `COLUMN_DEFAULT AS 'Default',`,\n      `pk.CONSTRAINT_TYPE AS 'Constraint',`,\n      `COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+'.'+c.TABLE_NAME), c.COLUMN_NAME, 'IsIdentity') as 'IsIdentity',`,\n      `CAST(prop.value AS NVARCHAR) AS 'Comment'`,\n      'FROM',\n      'INFORMATION_SCHEMA.TABLES t',\n      'INNER JOIN',\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name,',\n      'cu.column_name, tc.CONSTRAINT_TYPE',\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc',\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu',\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name',\n      'and tc.constraint_name=cu.constraint_name',\n      `and tc.CONSTRAINT_TYPE='PRIMARY KEY') pk`,\n      'ON pk.table_schema=c.table_schema',\n      'AND pk.table_name=c.table_name',\n      'AND pk.column_name=c.column_name',\n      'INNER JOIN sys.columns AS sc',\n      `ON sc.object_id = object_id(t.table_schema + '.' + t.table_name) AND sc.name = c.column_name`,\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\n      'AND prop.minor_id = sc.column_id',\n      `AND prop.name = 'MS_Description'`,\n      `WHERE t.TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND t.TABLE_SCHEMA = ${this.escape(table.schema!)}`,\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n    const objectId = table?.schema ? `${table.schema}.${table.tableName}` : `${table.tableName}`;\n\n    return joinSQLFragments([\n      'SELECT',\n      'I.[name] AS [index_name],',\n      'I.[type_desc] AS [index_type],',\n      'C.[name] AS [column_name],',\n      'IC.[is_descending_key],',\n      'IC.[is_included_column],',\n      'I.[is_unique],',\n      'I.[is_primary_key],',\n      'I.[is_unique_constraint]',\n      'FROM sys.indexes I',\n      'INNER JOIN sys.index_columns IC ON IC.index_id = I.index_id AND IC.object_id = I.object_id',\n      'INNER JOIN sys.columns C ON IC.object_id = C.object_id AND IC.column_id = C.column_id',\n      `WHERE I.[object_id] = OBJECT_ID(${this.escape(objectId)}) ORDER BY I.[name];`,\n    ]);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n      'ON',\n      this.quoteTable(tableName),\n    ]);\n  }\n\n  getForeignKeyQuery(tableName: TableNameOrModel, columnName?: string) {\n    const table = this.extractTableDetails(tableName);\n\n    // TODO: get the database from the provided tableName (see #12449)\n    const catalogName = this.sequelize.config.database;\n    const escapedCatalogName = this.escape(catalogName);\n\n    return joinSQLFragments([\n      `SELECT OBJ.NAME AS 'constraintName',`,\n      `${escapedCatalogName} AS 'constraintCatalog',`,\n      `SCHEMA_NAME(OBJ.SCHEMA_ID) AS 'constraintSchema',`,\n      `TB.NAME AS 'tableName',`,\n      `SCHEMA_NAME(TB.SCHEMA_ID) AS 'tableSchema',`,\n      `${escapedCatalogName} AS 'tableCatalog',`,\n      `COL.NAME AS 'columnName',`,\n      `SCHEMA_NAME(RTB.SCHEMA_ID) AS 'referencedTableSchema',`,\n      `${escapedCatalogName} AS 'referencedTableCatalog',`,\n      `RTB.NAME AS 'referencedTableName',`,\n      `RCOL.NAME AS 'referencedColumnName'`,\n      'FROM sys.foreign_key_columns FKC',\n      'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID',\n      'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID',\n      'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID',\n      'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID',\n      'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID',\n      `WHERE TB.NAME = ${this.escape(table.tableName)}`,\n      columnName && `AND COL.NAME = ${this.escape(columnName)}`,\n      `AND SCHEMA_NAME(TB.SCHEMA_ID) = ${this.escape(table.schema!)}`,\n    ]);\n  }\n\n  jsonPathExtractionQuery(sqlExpression: string, path: ReadonlyArray<number | string>, unquote: boolean): string {\n    if (!unquote) {\n      throw new Error(`JSON Paths are not supported in ${this.dialect.name} without unquoting the JSON value.`);\n    }\n\n    return `JSON_VALUE(${sqlExpression}, ${this.escape(buildJsonPath(path))})`;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `JSON_VALUE(${this.escape(arg, options)})`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
