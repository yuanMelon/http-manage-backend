{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/query-generator-typescript.ts"],
  "sourcesContent": ["import { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class IBMiQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  describeTableQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT',\n      'QSYS2.SYSCOLUMNS.*,',\n      'QSYS2.SYSCST.CONSTRAINT_NAME,',\n      'QSYS2.SYSCST.CONSTRAINT_TYPE',\n      'FROM QSYS2.SYSCOLUMNS',\n      'LEFT OUTER JOIN QSYS2.SYSCSTCOL',\n      'ON QSYS2.SYSCOLUMNS.TABLE_SCHEMA = QSYS2.SYSCSTCOL.TABLE_SCHEMA',\n      'AND QSYS2.SYSCOLUMNS.TABLE_NAME = QSYS2.SYSCSTCOL.TABLE_NAME',\n      'AND QSYS2.SYSCOLUMNS.COLUMN_NAME = QSYS2.SYSCSTCOL.COLUMN_NAME',\n      'LEFT JOIN QSYS2.SYSCST',\n      'ON QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME',\n      'WHERE QSYS2.SYSCOLUMNS.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      'AND QSYS2.SYSCOLUMNS.TABLE_NAME =',\n      this.escape(table.tableName),\n    ]);\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    const table = this.extractTableDetails(tableName);\n\n    // TODO [+odbc]: check if the query also works when capitalized (for consistency)\n    return joinSQLFragments([\n      'select QSYS2.SYSCSTCOL.CONSTRAINT_NAME as NAME, QSYS2.SYSCSTCOL.COLUMN_NAME, QSYS2.SYSCST.CONSTRAINT_TYPE, QSYS2.SYSCST.TABLE_SCHEMA,',\n      'QSYS2.SYSCST.TABLE_NAME from QSYS2.SYSCSTCOL left outer join QSYS2.SYSCST on QSYS2.SYSCSTCOL.TABLE_SCHEMA = QSYS2.SYSCST.TABLE_SCHEMA and',\n      'QSYS2.SYSCSTCOL.TABLE_NAME = QSYS2.SYSCST.TABLE_NAME and QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME where',\n      'QSYS2.SYSCSTCOL.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      `and QSYS2.SYSCSTCOL.TABLE_NAME = ${this.escape(table.tableName)} union select QSYS2.SYSKEYS.INDEX_NAME AS NAME,`,\n      `QSYS2.SYSKEYS.COLUMN_NAME, CAST('INDEX' AS VARCHAR(11)), QSYS2.SYSINDEXES.TABLE_SCHEMA, QSYS2.SYSINDEXES.TABLE_NAME from QSYS2.SYSKEYS`,\n      'left outer join QSYS2.SYSINDEXES on QSYS2.SYSKEYS.INDEX_NAME = QSYS2.SYSINDEXES.INDEX_NAME where QSYS2.SYSINDEXES.TABLE_SCHEMA =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      'and QSYS2.SYSINDEXES.TABLE_NAME =',\n      this.escape(table.tableName),\n    ]);\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'BEGIN',\n      options?.ifExists ? `IF EXISTS (SELECT * FROM QSYS2.SYSINDEXES WHERE INDEX_NAME = ${this.quoteIdentifier(indexName)}) THEN` : '',\n      `DROP INDEX ${this.quoteIdentifier(indexName)};`,\n      'COMMIT;',\n      options?.ifExists ? 'END IF;' : '',\n      'END',\n    ]);\n  }\n\n  getForeignKeyQuery(tableName: TableNameOrModel, columnName?: string) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT FK_CAT AS \"constraintCatalog\",',\n      'FK_SCHEM AS \"constraintSchema\",',\n      'FK_NAME AS \"constraintName\",',\n      'PKTABLE_CAT AS \"referencedTableCatalog\",',\n      'PKTABLE_SCHEM AS \"referencedTableSchema\",',\n      'PKTABLE_NAME AS \"referencedTableName\",',\n      'PKCOLUMN_NAME AS \"referencedColumnName\",',\n      'FKTABLE_CAT AS \"tableCatalog\",',\n      'FKTABLE_SCHEM AS \"tableSchema\",',\n      'FKTABLE_NAME AS \"tableName\",',\n      'FKCOLUMN_NAME AS \"columnName\"',\n      'FROM SYSIBM.SQLFOREIGNKEYS',\n      'WHERE FKTABLE_SCHEM =',\n      table.schema ? this.escape(table.schema) : 'CURRENT SCHEMA',\n      `AND FKTABLE_NAME = ${this.escape(table.tableName)}`,\n      columnName && `AND FKCOLUMN_NAME = ${this.escape(columnName)}`,\n    ]);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC;AACrC,gCAAiC;AACjC,oBAAkC;AAClC,6BAAuC;AACvC,wCAAuD;AAGvD,MAAM,uCAAuC,oBAAI,IAAmC,CAAC,UAAU,CAAC;AAKzF,MAAM,qCAAqC,8CAAuB;AAAA,EACvE,mBAAmB,WAA6B;AAC9C,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,SAAS,KAAK,OAAO,MAAM,MAAM,IAAI;AAAA,MAC3C;AAAA,MACA,KAAK,OAAO,MAAM,SAAS;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EAEA,iBAAiB,WAA6B;AAC5C,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAGhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,SAAS,KAAK,OAAO,MAAM,MAAM,IAAI;AAAA,MAC3C,oCAAoC,KAAK,OAAO,MAAM,SAAS;AAAA,MAC/D;AAAA,MACA;AAAA,MACA,MAAM,SAAS,KAAK,OAAO,MAAM,MAAM,IAAI;AAAA,MAC3C;AAAA,MACA,KAAK,OAAO,MAAM,SAAS;AAAA,IAC7B,CAAC;AAAA,EACH;AAAA,EAEA,iBACE,WACA,uBACA,SACA;AACA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,MAAM,QAAQ,qBAAqB,GAAG;AACxC,YAAM,QAAQ,KAAK,oBAAoB,SAAS;AAChD,sBAAY,iCAAkB,OAAO,EAAE,QAAQ,sBAAsB,CAAC;AAAA,IACxE,OAAO;AACL,kBAAY;AAAA,IACd;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,OACA,mCAAS,YAAW,gEAAgE,KAAK,gBAAgB,SAAS,YAAY;AAAA,MAC9H,cAAc,KAAK,gBAAgB,SAAS;AAAA,MAC5C;AAAA,OACA,mCAAS,YAAW,YAAY;AAAA,MAChC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB,WAA6B,YAAqB;AACnE,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,SAAS,KAAK,OAAO,MAAM,MAAM,IAAI;AAAA,MAC3C,sBAAsB,KAAK,OAAO,MAAM,SAAS;AAAA,MACjD,cAAc,uBAAuB,KAAK,OAAO,UAAU;AAAA,IAC7D,CAAC;AAAA,EACH;AACF;",
  "names": []
}
