{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { noSchemaDelimiterParameter, noSchemaParameter } from '../../utils/deprecations';\n\nconst sequelizeErrors = require('../../errors');\nconst { QueryTypes } = require('../../query-types');\nconst { ColumnsDescription } = require('../abstract/query-interface.types');\nconst { AbstractQueryInterface, QueryOptions } = require('../abstract/query-interface');\nconst { cloneDeep } = require('../../utils/object.js');\nconst _ = require('lodash');\nconst crypto = require('node:crypto');\n\n/**\n * The interface that Sequelize uses to talk with SQLite database\n */\nexport class SqliteQueryInterface extends AbstractQueryInterface {\n  /**\n   * A wrapper that fixes SQLite's inability to remove columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but without the obsolete column.\n   *\n   * @override\n   */\n  async removeColumn(tableName, attributeName, options) {\n    options = options || {};\n\n    const fields = await this.describeTable(tableName, options);\n    delete fields[attributeName];\n\n    return this.alterTableInternal(tableName, fields, options);\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to change columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a modified version of the respective column.\n   *\n   * @override\n   */\n  async changeColumn(tableName, columnName, dataTypeOrOptions, options) {\n    options = options || {};\n\n    const columns = await this.describeTable(tableName, options);\n    for (const column of Object.values(columns)) {\n      // This is handled by copying indexes over,\n      // we don't use \"unique\" because it creates an index with a name\n      // we can't control\n      delete column.unique;\n    }\n\n    Object.assign(columns[columnName], this.normalizeAttribute(dataTypeOrOptions));\n\n    return this.alterTableInternal(tableName, columns, options);\n  }\n\n  /**\n   * A wrapper that fixes SQLite's inability to rename columns from existing tables.\n   * It will create a backup of the table, drop the table afterwards and create a\n   * new table with the same name but with a renamed version of the respective column.\n   *\n   * @override\n   */\n  async renameColumn(tableName, attrNameBefore, attrNameAfter, options) {\n    options = options || {};\n    const fields = await this.assertTableHasColumn(tableName, attrNameBefore, options);\n\n    fields[attrNameAfter] = { ...fields[attrNameBefore] };\n    delete fields[attrNameBefore];\n\n    const sql = this.queryGenerator.renameColumnQuery(tableName, attrNameBefore, attrNameAfter, fields);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    let createTableSql;\n\n    const constraints = await this.showConstraint(tableName, constraintName);\n    // sqlite can't show only one constraint, so we find here the one to remove\n    const constraint = constraints.find(constaint => constaint.constraintName === constraintName);\n\n    if (!constraint) {\n      throw new sequelizeErrors.UnknownConstraintError({\n        message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n        constraint: constraintName,\n        table: tableName,\n      });\n    }\n\n    createTableSql = constraint.sql;\n    constraint.constraintName = this.queryGenerator.quoteIdentifier(constraint.constraintName);\n    let constraintSnippet = `, CONSTRAINT ${constraint.constraintName} ${constraint.constraintType} ${constraint.constraintCondition}`;\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      const referenceTableName = this.queryGenerator.quoteTable(constraint.referenceTableName);\n      constraint.referenceTableKeys = constraint.referenceTableKeys.map(columnName => this.queryGenerator.quoteIdentifier(columnName));\n      const referenceTableKeys = constraint.referenceTableKeys.join(', ');\n      constraintSnippet += ` REFERENCES ${referenceTableName} (${referenceTableKeys})`;\n      constraintSnippet += ` ON UPDATE ${constraint.updateAction}`;\n      constraintSnippet += ` ON DELETE ${constraint.deleteAction}`;\n    }\n\n    createTableSql = createTableSql.replace(constraintSnippet, '');\n    createTableSql += ';';\n\n    const fields = await this.describeTable(tableName, options);\n\n    const sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async addConstraint(tableName, options) {\n    if (!options.fields) {\n      throw new Error('Fields must be specified through options.fields');\n    }\n\n    if (!options.type) {\n      throw new Error('Constraint type must be specified through options.type');\n    }\n\n    options = cloneDeep(options);\n\n    const constraintSnippet = this.queryGenerator.getConstraintSnippet(tableName, options);\n    const describeCreateTableSql = this.queryGenerator.describeCreateTableQuery(tableName);\n\n    const constraints = await this.sequelize.queryRaw(describeCreateTableSql, { ...options, type: QueryTypes.SELECT, raw: true });\n    let sql = constraints[0].sql;\n    const index = sql.length - 1;\n    // Replace ending ')' with constraint snippet - Simulates String.replaceAt\n    // http://stackoverflow.com/questions/1431094\n    const createTableSql = `${sql.slice(0, Math.max(0, index))}, ${constraintSnippet})${sql.slice(index + 1)};`;\n\n    const fields = await this.describeTable(tableName, options);\n    sql = this.queryGenerator._alterConstraintQuery(tableName, fields, createTableSql);\n    const subQueries = sql.split(';').filter(q => q !== '');\n\n    for (const subQuery of subQueries) {\n      await this.sequelize.queryRaw(`${subQuery};`, { raw: true, ...options });\n    }\n  }\n\n  /**\n   * @override\n   */\n  async getForeignKeyReferencesForTable(tableName, options) {\n    const queryOptions = {\n      ...options,\n      type: QueryTypes.FOREIGNKEYS,\n    };\n\n    const query = this.queryGenerator.getForeignKeyQuery(tableName);\n\n    const result = await this.sequelize.queryRaw(query, queryOptions);\n\n    // Mapping the result for the constraints is the only change\n    return result.map(row => ({\n      tableName: row.tableName,\n      constraintName: row.constraintName,\n      columnName: row.columnName,\n      referencedTableName: row.referencedTableName,\n      referencedColumnName: row.referencedColumnName,\n      constraints: {\n        onUpdate: row.on_update,\n        onDelete: row.on_delete,\n      },\n    }));\n  }\n\n  /**\n   * @override\n   */\n  async dropAllTables(options) {\n    options = options || {};\n    const skip = options.skip || [];\n\n    const tableNames = await this.showAllTables(options);\n    await this.sequelize.queryRaw('PRAGMA foreign_keys = OFF', options);\n    await this._dropAllTables(tableNames, skip, options);\n    await this.sequelize.queryRaw('PRAGMA foreign_keys = ON', options);\n  }\n\n  /**\n   * @override\n   */\n  async describeTable(tableName, options) {\n    let table = {};\n\n    if (typeof tableName === 'string') {\n      table.tableName = tableName;\n    }\n\n    if (typeof tableName === 'object' && tableName !== null) {\n      table = tableName;\n    }\n\n    if (typeof options === 'string') {\n      noSchemaParameter();\n      table.schema = options;\n    }\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.schema) {\n        noSchemaParameter();\n        table.schema = options.schema;\n      }\n\n      if (options.schemaDelimiter) {\n        noSchemaDelimiterParameter();\n        table.delimiter = options.schemaDelimiter;\n      }\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(table);\n    const sqlIndexes = this.queryGenerator.showIndexesQuery(table);\n\n    try {\n      const data = await this.sequelize.queryRaw(sql, { ...options, type: QueryTypes.DESCRIBE });\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (_.isEmpty(data)) {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      const indexes = await this.sequelize.queryRaw(sqlIndexes, { ...options, type: QueryTypes.SHOWINDEXES });\n      for (const prop in data) {\n        data[prop].unique = false;\n      }\n\n      for (const index of indexes) {\n        for (const field of index.fields) {\n          if (index.unique !== undefined) {\n            data[field.attribute].unique = index.unique;\n          }\n        }\n      }\n\n      const foreignKeys = await this.getForeignKeyReferencesForTable(tableName, options);\n      for (const foreignKey of foreignKeys) {\n        data[foreignKey.columnName].references = {\n          table: foreignKey.referencedTableName,\n          key: foreignKey.referencedColumnName,\n        };\n\n        // Add constraints to column definition\n        Object.assign(data[foreignKey.columnName], {\n          onUpdate: foreignKey.constraints.onUpdate,\n          onDelete: foreignKey.constraints.onDelete,\n        });\n      }\n\n      return data;\n    } catch (error) {\n      if (error.cause && error.cause.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Alters a table in sqlite.\n   * Workaround for sqlite's limited alter table support.\n   *\n   * @param {string} tableName - The table's name\n   * @param {ColumnsDescription} columns - The table's description\n   * @param {QueryOptions} options - Query options\n   * @private\n   */\n  async alterTableInternal(tableName, columns, options) {\n    return this.withForeignKeysOff(options, async () => {\n      const savepointName = this.getSavepointName();\n      await this.sequelize.query(`SAVEPOINT ${savepointName};`, options);\n\n      try {\n        const indexes = await this.showIndex(tableName, options);\n        for (const index of indexes) {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (!index.constraintName.startsWith('sqlite_autoindex_')) {\n            continue;\n          }\n\n          if (!index.unique) {\n            continue;\n          }\n\n          for (const field of index.fields) {\n            if (columns[field.attribute]) {\n              columns[field.attribute].unique = true;\n            }\n          }\n        }\n\n        const sql = this.queryGenerator.removeColumnQuery(tableName, columns);\n        const subQueries = sql.split(';').filter(q => q !== '');\n\n        for (const subQuery of subQueries) {\n          await this.sequelize.query(`${subQuery};`, { raw: true, ...options });\n        }\n\n        // Run a foreign keys integrity check\n        const foreignKeyCheckResult = await this.sequelize.query(this.queryGenerator.foreignKeyCheckQuery(tableName), {\n          ...options,\n          type: QueryTypes.SELECT,\n        });\n\n        if (foreignKeyCheckResult.length > 0) {\n          // There are foreign key violations, exit\n          throw new sequelizeErrors.ForeignKeyConstraintError({\n            message: `Foreign key violations detected: ${JSON.stringify(foreignKeyCheckResult, null, 2)}`,\n            table: tableName,\n          });\n        }\n\n        await Promise.all(indexes.map(async index => {\n          // This index is reserved by SQLite, we can't add it through addIndex and must use \"UNIQUE\" on the column definition instead.\n          if (index.constraintName.startsWith('sqlite_autoindex_')) {\n            return;\n          }\n\n          return this.addIndex(tableName, index);\n        }));\n\n        await this.sequelize.query(`RELEASE ${savepointName};`, options);\n      } catch (error) {\n        await this.sequelize.query(`ROLLBACK TO ${savepointName};`, options);\n        throw error;\n      }\n    });\n  }\n\n  /**\n   * Runs the provided callback with foreign keys disabled.\n   *\n   * @param {QueryOptions} [options]\n   * @param {Function<Promise<any>>} cb\n   * @private\n   */\n  async withForeignKeysOff(options, cb) {\n    await this.sequelize.query('PRAGMA foreign_keys = OFF;', options);\n\n    try {\n      return await cb();\n    } finally {\n      await this.sequelize.query('PRAGMA foreign_keys = ON;', options);\n    }\n  }\n\n  /**\n   * Returns a randomly generated savepoint name\n   *\n   * @param {string} prefix\n   * @returns {string}\n   */\n  getSavepointName(prefix = 'sequelize') {\n    // sqlite does not support \"-\" (dashes) in transaction's name\n    const suffix = crypto.randomUUID().replaceAll('-', '_');\n\n    return `${prefix}_${suffix}`;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
