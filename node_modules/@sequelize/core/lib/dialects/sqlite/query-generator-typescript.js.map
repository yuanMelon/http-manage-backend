{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/query-generator-typescript.ts"],
  "sourcesContent": ["import { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { generateIndexName } from '../../utils/string';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type { RemoveIndexQueryOptions, TableNameOrModel } from '../abstract/query-generator-typescript';\nimport { MySqlQueryGenerator } from '../mysql/query-generator';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>(['ifExists']);\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class SqliteQueryGeneratorTypeScript extends MySqlQueryGenerator {\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `PRAGMA TABLE_INFO(${this.quoteTable(tableName)})`;\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    return `PRAGMA INDEX_LIST(${this.quoteTable(tableName)})`;\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `PRAGMA foreign_keys = ${enable ? 'ON' : 'OFF'}`;\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return joinSQLFragments([\n      'DROP INDEX',\n      options?.ifExists ? 'IF EXISTS' : '',\n      this.quoteIdentifier(indexName),\n    ]);\n  }\n\n  getForeignKeyQuery(tableName: TableNameOrModel, columnName?: string) {\n    if (columnName) {\n      throw new Error(`Providing a columnName in getForeignKeyQuery is not supported by ${this.dialect.name}.`);\n    }\n\n    const escapedTable = this.escapeTable(tableName);\n\n    return joinSQLFragments([\n      'SELECT id as `constraintName`,',\n      `${escapedTable} as \\`tableName\\`,`,\n      'pragma.`from` AS `columnName`,',\n      'pragma.`table` AS `referencedTableName`,',\n      'pragma.`to` AS `referencedColumnName`,',\n      'pragma.`on_update`,',\n      'pragma.`on_delete`',\n      `FROM pragma_foreign_key_list(${escapedTable}) AS pragma;`,\n    ]);\n  }\n\n  escapeTable(tableName: TableNameOrModel): string {\n    const table = this.extractTableDetails(tableName);\n\n    if (table.schema) {\n      return this.escape(`${table.schema}${table.delimiter}${table.tableName}`);\n    }\n\n    return this.escape(table.tableName);\n\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC;AACrC,gCAAiC;AACjC,oBAAkC;AAClC,wCAAuD;AAEvD,6BAAoC;AAEpC,MAAM,uCAAuC,oBAAI,IAAmC,CAAC,UAAU,CAAC;AAKzF,MAAM,uCAAuC,2CAAoB;AAAA,EACtE,mBAAmB,WAA6B;AAC9C,WAAO,qBAAqB,KAAK,WAAW,SAAS;AAAA,EACvD;AAAA,EAEA,iBAAiB,WAA6B;AAC5C,WAAO,qBAAqB,KAAK,WAAW,SAAS;AAAA,EACvD;AAAA,EAEA,+BAA+B,QAAyB;AACtD,WAAO,yBAAyB,SAAS,OAAO;AAAA,EAClD;AAAA,EAEA,iBACE,WACA,uBACA,SACA;AACA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,MAAM,QAAQ,qBAAqB,GAAG;AACxC,YAAM,QAAQ,KAAK,oBAAoB,SAAS;AAChD,sBAAY,iCAAkB,OAAO,EAAE,QAAQ,sBAAsB,CAAC;AAAA,IACxE,OAAO;AACL,kBAAY;AAAA,IACd;AAEA,eAAO,4CAAiB;AAAA,MACtB;AAAA,OACA,mCAAS,YAAW,cAAc;AAAA,MAClC,KAAK,gBAAgB,SAAS;AAAA,IAChC,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB,WAA6B,YAAqB;AACnE,QAAI,YAAY;AACd,YAAM,IAAI,MAAM,oEAAoE,KAAK,QAAQ,OAAO;AAAA,IAC1G;AAEA,UAAM,eAAe,KAAK,YAAY,SAAS;AAE/C,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA,GAAG;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gCAAgC;AAAA,IAClC,CAAC;AAAA,EACH;AAAA,EAEA,YAAY,WAAqC;AAC/C,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,QAAI,MAAM,QAAQ;AAChB,aAAO,KAAK,OAAO,GAAG,MAAM,SAAS,MAAM,YAAY,MAAM,WAAW;AAAA,IAC1E;AAEA,WAAO,KAAK,OAAO,MAAM,SAAS;AAAA,EAEpC;AACF;",
  "names": []
}
