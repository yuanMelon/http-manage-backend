{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-generator-typescript.ts"],
  "sourcesContent": ["import { Op } from '../../operators.js';\nimport type { Expression } from '../../sequelize.js';\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { joinSQLFragments } from '../../utils/join-sql-fragments';\nimport { buildJsonPath } from '../../utils/json.js';\nimport { generateIndexName } from '../../utils/string';\nimport { AbstractQueryGenerator } from '../abstract/query-generator';\nimport { REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS } from '../abstract/query-generator-typescript';\nimport type {\n  EscapeOptions,\n  QueryGeneratorOptions,\n  RemoveIndexQueryOptions,\n  TableNameOrModel,\n} from '../abstract/query-generator-typescript';\n\nconst REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS = new Set<keyof RemoveIndexQueryOptions>();\n\n/**\n * Temporary class to ease the TypeScript migration\n */\nexport class MySqlQueryGeneratorTypeScript extends AbstractQueryGenerator {\n  constructor(options: QueryGeneratorOptions) {\n    super(options);\n\n    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP');\n    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP');\n  }\n\n  describeTableQuery(tableName: TableNameOrModel) {\n    return `SHOW FULL COLUMNS FROM ${this.quoteTable(tableName)};`;\n  }\n\n  showIndexesQuery(tableName: TableNameOrModel) {\n    return `SHOW INDEX FROM ${this.quoteTable(tableName)}`;\n  }\n\n  getToggleForeignKeyChecksQuery(enable: boolean): string {\n    return `SET FOREIGN_KEY_CHECKS=${enable ? '1' : '0'}`;\n  }\n\n  removeIndexQuery(\n    tableName: TableNameOrModel,\n    indexNameOrAttributes: string | string[],\n    options?: RemoveIndexQueryOptions,\n  ) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeIndexQuery',\n        this.dialect.name,\n        REMOVE_INDEX_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_INDEX_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    let indexName: string;\n    if (Array.isArray(indexNameOrAttributes)) {\n      const table = this.extractTableDetails(tableName);\n      indexName = generateIndexName(table, { fields: indexNameOrAttributes });\n    } else {\n      indexName = indexNameOrAttributes;\n    }\n\n    return `DROP INDEX ${this.quoteIdentifier(indexName)} ON ${this.quoteTable(tableName)}`;\n  }\n\n  getForeignKeyQuery(tableName: TableNameOrModel, columnName?: string) {\n    const table = this.extractTableDetails(tableName);\n\n    return joinSQLFragments([\n      'SELECT CONSTRAINT_NAME as constraintName,',\n      'CONSTRAINT_SCHEMA as constraintSchema,',\n      'TABLE_NAME as tableName,',\n      'TABLE_SCHEMA as tableSchema,',\n      'COLUMN_NAME as columnName,',\n      'REFERENCED_TABLE_SCHEMA as referencedTableSchema,',\n      'REFERENCED_TABLE_NAME as referencedTableName,',\n      'REFERENCED_COLUMN_NAME as referencedColumnName',\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\n      'WHERE',\n      `TABLE_NAME = ${this.escape(table.tableName)}`,\n      `AND TABLE_SCHEMA = ${this.escape(table.schema!)}`,\n      columnName && `AND COLUMN_NAME = ${this.escape(columnName)}`,\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\n    ]);\n  }\n\n  jsonPathExtractionQuery(sqlExpression: string, path: ReadonlyArray<number | string>, unquote: boolean): string {\n    const extractQuery = `json_extract(${sqlExpression},${this.escape(buildJsonPath(path))})`;\n    if (unquote) {\n      return `json_unquote(${extractQuery})`;\n    }\n\n    return extractQuery;\n  }\n\n  formatUnquoteJson(arg: Expression, options?: EscapeOptions) {\n    return `json_unquote(${this.escape(arg, options)})`;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmB;AAEnB,mBAAqC;AACrC,gCAAiC;AACjC,kBAA8B;AAC9B,oBAAkC;AAClC,6BAAuC;AACvC,wCAAuD;AAQvD,MAAM,uCAAuC,oBAAI,IAAmC;AAK7E,MAAM,sCAAsC,8CAAuB;AAAA,EACxE,YAAY,SAAgC;AAC1C,UAAM,OAAO;AAEb,SAAK,gBAAgB,mBAAmB,oBAAG,QAAQ,QAAQ;AAC3D,SAAK,gBAAgB,mBAAmB,oBAAG,WAAW,YAAY;AAAA,EACpE;AAAA,EAEA,mBAAmB,WAA6B;AAC9C,WAAO,0BAA0B,KAAK,WAAW,SAAS;AAAA,EAC5D;AAAA,EAEA,iBAAiB,WAA6B;AAC5C,WAAO,mBAAmB,KAAK,WAAW,SAAS;AAAA,EACrD;AAAA,EAEA,+BAA+B,QAAyB;AACtD,WAAO,0BAA0B,SAAS,MAAM;AAAA,EAClD;AAAA,EAEA,iBACE,WACA,uBACA,SACA;AACA,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,MAAM,QAAQ,qBAAqB,GAAG;AACxC,YAAM,QAAQ,KAAK,oBAAoB,SAAS;AAChD,sBAAY,iCAAkB,OAAO,EAAE,QAAQ,sBAAsB,CAAC;AAAA,IACxE,OAAO;AACL,kBAAY;AAAA,IACd;AAEA,WAAO,cAAc,KAAK,gBAAgB,SAAS,QAAQ,KAAK,WAAW,SAAS;AAAA,EACtF;AAAA,EAEA,mBAAmB,WAA6B,YAAqB;AACnE,UAAM,QAAQ,KAAK,oBAAoB,SAAS;AAEhD,eAAO,4CAAiB;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB,KAAK,OAAO,MAAM,SAAS;AAAA,MAC3C,sBAAsB,KAAK,OAAO,MAAM,MAAO;AAAA,MAC/C,cAAc,qBAAqB,KAAK,OAAO,UAAU;AAAA,MACzD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,wBAAwB,eAAuB,MAAsC,SAA0B;AAC7G,UAAM,eAAe,gBAAgB,iBAAiB,KAAK,WAAO,2BAAc,IAAI,CAAC;AACrF,QAAI,SAAS;AACX,aAAO,gBAAgB;AAAA,IACzB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB,KAAiB,SAAyB;AAC1D,WAAO,gBAAgB,KAAK,OAAO,KAAK,OAAO;AAAA,EACjD;AACF;",
  "names": []
}
