{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-interface.js"],
  "sourcesContent": ["'use strict';\n\nimport { getObjectFromMap } from '../../utils/object';\nimport { assertNoReservedBind, combineBinds } from '../../utils/sql';\n\nconst sequelizeErrors = require('../../errors');\nconst { AbstractQueryInterface } = require('../abstract/query-interface');\nconst { QueryTypes } = require('../../query-types');\n\n/**\n * The interface that Sequelize uses to talk with MySQL/MariaDB database\n */\nexport class MySqlQueryInterface extends AbstractQueryInterface {\n  /**\n   * A wrapper that fixes MySQL's inability to cleanly remove columns from existing tables if they have a foreign key constraint.\n   *\n   * @override\n   */\n  async removeColumn(tableName, columnName, options) {\n    options = options || {};\n\n    const [results] = await this.sequelize.queryRaw(\n      this.queryGenerator.getForeignKeyQuery(tableName, columnName),\n      { raw: true, ...options },\n    );\n\n    // Exclude primary key constraint\n    if (results.length > 0 && results[0].constraintName !== 'PRIMARY') {\n      await Promise.all(results.map(constraint => this.sequelize.queryRaw(\n        this.queryGenerator.dropForeignKeyQuery(tableName, constraint.constraintName),\n        { raw: true, ...options },\n      )));\n    }\n\n    return await this.sequelize.queryRaw(\n      this.queryGenerator.removeColumnQuery(tableName, columnName),\n      { raw: true, ...options },\n    );\n  }\n\n  /**\n   * @override\n   */\n  async upsert(tableName, insertValues, updateValues, where, options) {\n    if (options.bind) {\n      assertNoReservedBind(options.bind);\n    }\n\n    const modelDefinition = options.model.modelDefinition;\n\n    options = { ...options };\n\n    options.type = QueryTypes.UPSERT;\n    options.updateOnDuplicate = Object.keys(updateValues);\n    options.upsertKeys = Array.from(modelDefinition.primaryKeysAttributeNames, pkAttrName => modelDefinition.getColumnName(pkAttrName));\n\n    const { query, bind } = this.queryGenerator.insertQuery(tableName, insertValues, getObjectFromMap(modelDefinition.attributes), options);\n\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw\n    delete options.replacements;\n    options.bind = combineBinds(options.bind, bind);\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n\n  /**\n   * @override\n   */\n  async removeConstraint(tableName, constraintName, options) {\n    const sql = this.queryGenerator.showConstraintsQuery(\n      tableName.tableName ? tableName : {\n        tableName,\n        schema: this.sequelize.config.database,\n      }, constraintName,\n    );\n\n    const constraints = await this.sequelize.queryRaw(sql, {\n      ...options,\n      type: this.sequelize.QueryTypes.SHOWCONSTRAINTS,\n    });\n\n    const constraint = constraints[0];\n    let query;\n    if (!constraint || !constraint.constraintType) {\n      throw new sequelizeErrors.UnknownConstraintError(\n        {\n          message: `Constraint ${constraintName} on table ${tableName} does not exist`,\n          constraint: constraintName,\n          table: tableName,\n        },\n      );\n    }\n\n    if (constraint.constraintType === 'FOREIGN KEY') {\n      query = this.queryGenerator.dropForeignKeyQuery(tableName, constraintName);\n    } else {\n      query = this.queryGenerator.removeIndexQuery(constraint.tableName, constraint.constraintName);\n    }\n\n    return await this.sequelize.queryRaw(query, options);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,oBAAiC;AACjC,iBAAmD;AAEnD,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,uBAAuB,IAAI,QAAQ,6BAA6B;AACxE,MAAM,EAAE,WAAW,IAAI,QAAQ,mBAAmB;AAK3C,MAAM,4BAA4B,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM9D,MAAM,aAAa,WAAW,YAAY,SAAS;AACjD,cAAU,WAAW,CAAC;AAEtB,UAAM,CAAC,OAAO,IAAI,MAAM,KAAK,UAAU;AAAA,MACrC,KAAK,eAAe,mBAAmB,WAAW,UAAU;AAAA,MAC5D,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,IAC1B;AAGA,QAAI,QAAQ,SAAS,KAAK,QAAQ,CAAC,EAAE,mBAAmB,WAAW;AACjE,YAAM,QAAQ,IAAI,QAAQ,IAAI,gBAAc,KAAK,UAAU;AAAA,QACzD,KAAK,eAAe,oBAAoB,WAAW,WAAW,cAAc;AAAA,QAC5E,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,MAC1B,CAAC,CAAC;AAAA,IACJ;AAEA,WAAO,MAAM,KAAK,UAAU;AAAA,MAC1B,KAAK,eAAe,kBAAkB,WAAW,UAAU;AAAA,MAC3D,EAAE,KAAK,MAAM,GAAG,QAAQ;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,UAAM,kBAAkB,QAAQ,MAAM;AAEtC,cAAU,EAAE,GAAG,QAAQ;AAEvB,YAAQ,OAAO,WAAW;AAC1B,YAAQ,oBAAoB,OAAO,KAAK,YAAY;AACpD,YAAQ,aAAa,MAAM,KAAK,gBAAgB,2BAA2B,gBAAc,gBAAgB,cAAc,UAAU,CAAC;AAElI,UAAM,EAAE,OAAO,KAAK,IAAI,KAAK,eAAe,YAAY,WAAW,kBAAc,gCAAiB,gBAAgB,UAAU,GAAG,OAAO;AAGtI,WAAO,QAAQ;AACf,YAAQ,WAAO,yBAAa,QAAQ,MAAM,IAAI;AAE9C,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,iBAAiB,WAAW,gBAAgB,SAAS;AACzD,UAAM,MAAM,KAAK,eAAe;AAAA,MAC9B,UAAU,YAAY,YAAY;AAAA,QAChC;AAAA,QACA,QAAQ,KAAK,UAAU,OAAO;AAAA,MAChC;AAAA,MAAG;AAAA,IACL;AAEA,UAAM,cAAc,MAAM,KAAK,UAAU,SAAS,KAAK;AAAA,MACrD,GAAG;AAAA,MACH,MAAM,KAAK,UAAU,WAAW;AAAA,IAClC,CAAC;AAED,UAAM,aAAa,YAAY,CAAC;AAChC,QAAI;AACJ,QAAI,CAAC,cAAc,CAAC,WAAW,gBAAgB;AAC7C,YAAM,IAAI,gBAAgB;AAAA,QACxB;AAAA,UACE,SAAS,cAAc,2BAA2B;AAAA,UAClD,YAAY;AAAA,UACZ,OAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,QAAI,WAAW,mBAAmB,eAAe;AAC/C,cAAQ,KAAK,eAAe,oBAAoB,WAAW,cAAc;AAAA,IAC3E,OAAO;AACL,cAAQ,KAAK,eAAe,iBAAiB,WAAW,WAAW,WAAW,cAAc;AAAA,IAC9F;AAEA,WAAO,MAAM,KAAK,UAAU,SAAS,OAAO,OAAO;AAAA,EACrD;AACF;",
  "names": []
}
