"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_interface_typescript_exports = {};
__export(query_interface_typescript_exports, {
  AbstractQueryInterfaceTypeScript: () => AbstractQueryInterfaceTypeScript
});
module.exports = __toCommonJS(query_interface_typescript_exports);
var import_isEmpty = __toESM(require("lodash/isEmpty"));
var import_errors = require("../../errors");
var import_model_internals = require("../../model-internals.js");
var import_query_types = require("../../query-types");
var import_deprecations = require("../../utils/deprecations");
class AbstractQueryInterfaceTypeScript {
  sequelize;
  queryGenerator;
  constructor(options) {
    this.sequelize = options.sequelize;
    this.queryGenerator = options.queryGenerator;
  }
  /**
   * Create a new database schema.
   *
   * **Note:** We define schemas as a namespace that can contain tables.
   * In mysql and mariadb, this command will create what they call a database.
   *
   * @param schema Name of the schema
   * @param options
   */
  async createSchema(schema, options) {
    const sql = this.queryGenerator.createSchemaQuery(schema, options);
    await this.sequelize.queryRaw(sql, options);
  }
  /**
   * Drop a single schema
   *
   * **Note:** We define schemas as a namespace that can contain tables.
   * In mysql and mariadb, this command will create what they call a database.
   *
   * @param schema Name of the schema
   * @param options
   */
  async dropSchema(schema, options) {
    const dropSchemaQuery = this.queryGenerator.dropSchemaQuery(schema);
    let sql;
    let queryRawOptions;
    if (typeof dropSchemaQuery === "string") {
      sql = dropSchemaQuery;
      queryRawOptions = options;
    } else {
      sql = dropSchemaQuery.query;
      queryRawOptions = { ...options, bind: dropSchemaQuery.bind };
    }
    await this.sequelize.queryRaw(sql, queryRawOptions);
  }
  /**
   * Show all defined schemas
   *
   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
   * not a database table. In mysql and mariadb, this will show all databases.
   *
   * @param options
   *
   * @returns list of schemas
   */
  async showAllSchemas(options) {
    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);
    const queryRawOptions = {
      ...options,
      raw: true,
      type: import_query_types.QueryTypes.SELECT
    };
    const schemaNames = await this.sequelize.queryRaw(showSchemasSql, queryRawOptions);
    return schemaNames.flatMap((value) => value.schema_name ? value.schema_name : value);
  }
  /**
   * Describe a table structure
   *
   * This method returns an array of hashes containing information about all attributes in the table.
   *
   * ```js
   * {
   *    name: {
   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!
   *      allowNull:    true,
   *      defaultValue: null
   *    },
   *    isBetaMember: {
   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!
   *      allowNull:    false,
   *      defaultValue: false
   *    }
   * }
   * ```
   *
   * @param tableName
   * @param options Query options
   *
   */
  async describeTable(tableName, options) {
    var _a;
    const table = this.queryGenerator.extractTableDetails(tableName);
    if (typeof options === "string") {
      (0, import_deprecations.noSchemaParameter)();
      table.schema = options;
    }
    if (typeof options === "object" && options !== null) {
      if (options.schema) {
        (0, import_deprecations.noSchemaParameter)();
        table.schema = options.schema;
      }
      if (options.schemaDelimiter) {
        (0, import_deprecations.noSchemaDelimiterParameter)();
        table.delimiter = options.schemaDelimiter;
      }
    }
    const sql = this.queryGenerator.describeTableQuery(table);
    const queryOptions = { ...options, type: import_query_types.QueryTypes.DESCRIBE };
    try {
      const data = await this.sequelize.queryRaw(sql, queryOptions);
      if ((0, import_isEmpty.default)(data)) {
        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
      }
      return data;
    } catch (error) {
      if (error instanceof import_errors.BaseError && ((_a = error.cause) == null ? void 0 : _a.code) === "ER_NO_SUCH_TABLE") {
        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ""}. Check the table name and schema; remember, they _are_ case sensitive.`);
      }
      throw error;
    }
  }
  async withoutForeignKeyChecks(optionsOrCallback, maybeCallback) {
    let options;
    let callback;
    if (typeof optionsOrCallback === "function") {
      options = {};
      callback = optionsOrCallback;
    } else {
      options = { ...optionsOrCallback };
      callback = maybeCallback;
    }
    (0, import_model_internals.setTransactionFromCls)(options, this.sequelize);
    if (options.connection) {
      return this.#withoutForeignKeyChecks(options, callback);
    }
    return this.sequelize.withConnection(async (connection) => {
      return this.#withoutForeignKeyChecks({ ...options, connection }, callback);
    });
  }
  async #withoutForeignKeyChecks(options, cb) {
    try {
      await this.unsafeToggleForeignKeyChecks(false, options);
      return await cb(options.connection);
    } finally {
      await this.unsafeToggleForeignKeyChecks(true, options);
    }
  }
  /**
   * Toggles foreign key checks.
   * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.
   *
   * @param enable
   * @param options
   */
  async unsafeToggleForeignKeyChecks(enable, options) {
    await this.sequelize.queryRaw(this.queryGenerator.getToggleForeignKeyChecksQuery(enable), options);
  }
}
//# sourceMappingURL=query-interface-typescript.js.map
