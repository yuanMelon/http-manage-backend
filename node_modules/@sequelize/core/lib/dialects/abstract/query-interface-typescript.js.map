{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query-interface-typescript.ts"],
  "sourcesContent": ["import isEmpty from 'lodash/isEmpty';\nimport { BaseError } from '../../errors';\nimport { setTransactionFromCls } from '../../model-internals.js';\nimport { QueryTypes } from '../../query-types';\nimport type { QueryRawOptions, QueryRawOptionsWithType, Sequelize } from '../../sequelize';\nimport { noSchemaDelimiterParameter, noSchemaParameter } from '../../utils/deprecations';\nimport type { Connection } from './connection-manager.js';\nimport type { AbstractQueryGenerator } from './query-generator';\nimport type { TableNameOrModel } from './query-generator-typescript.js';\nimport type { QueryWithBindParams } from './query-generator.types';\nimport type {\n  ColumnsDescription,\n  CreateSchemaOptions,\n  DescribeTableOptions,\n  QueryInterfaceOptions,\n  ShowAllSchemasOptions,\n} from './query-interface.types';\n\nexport type WithoutForeignKeyChecksCallback<T> = (connection: Connection) => Promise<T>;\n\n// DO NOT MAKE THIS CLASS PUBLIC!\n/**\n * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.\n * Always use {@link AbstractQueryInterface} instead.\n */\nexport class AbstractQueryInterfaceTypeScript {\n  readonly sequelize: Sequelize;\n  readonly queryGenerator: AbstractQueryGenerator;\n\n  constructor(options: QueryInterfaceOptions) {\n    this.sequelize = options.sequelize;\n    this.queryGenerator = options.queryGenerator;\n  }\n\n  /**\n   * Create a new database schema.\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async createSchema(schema: string, options?: CreateSchemaOptions): Promise<void> {\n    const sql = this.queryGenerator.createSchemaQuery(schema, options);\n    await this.sequelize.queryRaw(sql, options);\n  }\n\n  /**\n   * Drop a single schema\n   *\n   * **Note:** We define schemas as a namespace that can contain tables.\n   * In mysql and mariadb, this command will create what they call a database.\n   *\n   * @param schema Name of the schema\n   * @param options\n   */\n  async dropSchema(schema: string, options?: QueryRawOptions): Promise<void> {\n    const dropSchemaQuery: string | QueryWithBindParams = this.queryGenerator.dropSchemaQuery(schema);\n\n    let sql: string;\n    let queryRawOptions: undefined | QueryRawOptions;\n    if (typeof dropSchemaQuery === 'string') {\n      sql = dropSchemaQuery;\n      queryRawOptions = options;\n    } else {\n      sql = dropSchemaQuery.query;\n      queryRawOptions = { ...options, bind: dropSchemaQuery.bind };\n    }\n\n    await this.sequelize.queryRaw(sql, queryRawOptions);\n  }\n\n  /**\n   * Show all defined schemas\n   *\n   * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),\n   * not a database table. In mysql and mariadb, this will show all databases.\n   *\n   * @param options\n   *\n   * @returns list of schemas\n   */\n  async showAllSchemas(options?: ShowAllSchemasOptions): Promise<string[]> {\n    const showSchemasSql = this.queryGenerator.listSchemasQuery(options);\n    const queryRawOptions = {\n      ...options,\n      raw: true,\n      type: QueryTypes.SELECT,\n    };\n\n    const schemaNames = await this.sequelize.queryRaw(showSchemasSql, queryRawOptions);\n\n    return schemaNames.flatMap((value: any) => (value.schema_name ? value.schema_name : value));\n  }\n\n  /**\n   * Describe a table structure\n   *\n   * This method returns an array of hashes containing information about all attributes in the table.\n   *\n   * ```js\n   * {\n   *    name: {\n   *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!\n   *      allowNull:    true,\n   *      defaultValue: null\n   *    },\n   *    isBetaMember: {\n   *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!\n   *      allowNull:    false,\n   *      defaultValue: false\n   *    }\n   * }\n   * ```\n   *\n   * @param tableName\n   * @param options Query options\n   *\n   */\n  async describeTable(tableName: TableNameOrModel, options?: DescribeTableOptions): Promise<ColumnsDescription> {\n    const table = this.queryGenerator.extractTableDetails(tableName);\n\n    if (typeof options === 'string') {\n      noSchemaParameter();\n      table.schema = options;\n    }\n\n    if (typeof options === 'object' && options !== null) {\n      if (options.schema) {\n        noSchemaParameter();\n        table.schema = options.schema;\n      }\n\n      if (options.schemaDelimiter) {\n        noSchemaDelimiterParameter();\n        table.delimiter = options.schemaDelimiter;\n      }\n    }\n\n    const sql = this.queryGenerator.describeTableQuery(table);\n    const queryOptions: QueryRawOptionsWithType<QueryTypes.DESCRIBE> = { ...options, type: QueryTypes.DESCRIBE };\n\n    try {\n      const data = await this.sequelize.queryRaw(sql, queryOptions);\n      /*\n       * If no data is returned from the query, then the table name may be wrong.\n       * Query generators that use information_schema for retrieving table info will just return an empty result set,\n       * it will not throw an error like built-ins do (e.g. DESCRIBE on MySql).\n       */\n      if (isEmpty(data)) {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      return data;\n    } catch (error: unknown) {\n      if (error instanceof BaseError && error.cause?.code === 'ER_NO_SUCH_TABLE') {\n        throw new Error(`No description found for table ${table.tableName}${table.schema ? ` in schema ${table.schema}` : ''}. Check the table name and schema; remember, they _are_ case sensitive.`);\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Disables foreign key checks for the duration of the callback.\n   * The foreign key checks are only disabled for the current connection.\n   * To specify the connection, you can either use the \"connection\" or the \"transaction\" option.\n   * If you do not specify a connection, this method will reserve a connection for the duration of the callback,\n   * and release it afterwards. You will receive the connection or transaction as the first argument of the callback.\n   * You must use this connection to execute queries\n   *\n   * @example\n   * ```ts\n   * await this.queryInterface.withoutForeignKeyChecks(options, async connection => {\n   *   const truncateOptions = { ...options, connection };\n   *\n   *   for (const model of models) {\n   *     await model.truncate(truncateOptions);\n   *   }\n   * });\n   * ```\n   *\n   * @param cb\n   */\n  async withoutForeignKeyChecks<T>(cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;\n  async withoutForeignKeyChecks<T>(options: QueryRawOptions, cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;\n  async withoutForeignKeyChecks<T>(\n    optionsOrCallback: QueryRawOptions | WithoutForeignKeyChecksCallback<T>,\n    maybeCallback?: WithoutForeignKeyChecksCallback<T>,\n  ): Promise<T> {\n    let options: QueryRawOptions;\n    let callback: WithoutForeignKeyChecksCallback<T>;\n\n    if (typeof optionsOrCallback === 'function') {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = { ...optionsOrCallback };\n      callback = maybeCallback!;\n    }\n\n    setTransactionFromCls(options, this.sequelize);\n\n    if (options.connection) {\n      return this.#withoutForeignKeyChecks(options, callback);\n    }\n\n    return this.sequelize.withConnection(async connection => {\n      return this.#withoutForeignKeyChecks({ ...options, connection }, callback);\n    });\n  }\n\n  async #withoutForeignKeyChecks<T>(options: QueryRawOptions, cb: WithoutForeignKeyChecksCallback<T>): Promise<T> {\n    try {\n      await this.unsafeToggleForeignKeyChecks(false, options);\n\n      return await cb(options.connection!);\n    } finally {\n      await this.unsafeToggleForeignKeyChecks(true, options);\n    }\n  }\n\n  /**\n   * Toggles foreign key checks.\n   * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.\n   *\n   * @param enable\n   * @param options\n   */\n  async unsafeToggleForeignKeyChecks(\n    enable: boolean,\n    options?: QueryRawOptions,\n  ): Promise<void> {\n    await this.sequelize.queryRaw(this.queryGenerator.getToggleForeignKeyChecksQuery(enable), options);\n  }\n}\n"],
  "mappings": "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",
  "names": ["isEmpty"]
}
