{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nimport { rejectInvalidOptions } from '../../utils/check';\nimport { removeNullishValuesFromHash } from '../../utils/format';\nimport { removeTrailingSemicolon } from '../../utils/string';\nimport { defaultValueSchemable } from '../../utils/query-builder-utils';\nimport { attributeTypeToSql, normalizeDataType } from '../abstract/data-types-utils';\nimport {\n  ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n  CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n  REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n} from '../abstract/query-generator';\nimport { Db2QueryGeneratorTypeScript } from './query-generator-typescript';\n\nconst _ = require('lodash');\nconst DataTypes = require('../../data-types');\nconst randomBytes = require('node:crypto').randomBytes;\nconst { Op } = require('../../operators');\n\nconst CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS = new Set();\nconst ADD_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\nconst REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS = new Set();\nconst CREATE_TABLE_QUERY_SUPPORTED_OPTIONS = new Set(['uniqueKeys']);\n\n/* istanbul ignore next */\nfunction throwMethodUndefined(methodName) {\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\n}\n\nexport class Db2QueryGenerator extends Db2QueryGeneratorTypeScript {\n  constructor(options) {\n    super(options);\n\n    this.whereSqlBuilder.setOperatorKeyword(Op.regexp, 'REGEXP_LIKE');\n    this.whereSqlBuilder.setOperatorKeyword(Op.notRegexp, 'NOT REGEXP_LIKE');\n\n    this.autoGenValue = 1;\n  }\n\n  createSchemaQuery(schema, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'createSchemaQuery',\n        this.dialect.name,\n        CREATE_SCHEMA_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_SCHEMA_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    return `CREATE SCHEMA ${this.quoteIdentifier(schema)};`;\n  }\n\n  _errorTableCount = 0;\n\n  dropSchemaQuery(schema) {\n    // DROP SCHEMA Can't drop schema if it is not empty.\n    // DROP SCHEMA Can't drop objects belonging to the schema\n    // So, call the admin procedure to drop schema.\n    const query = `CALL SYSPROC.ADMIN_DROP_SCHEMA(${this.escape(schema.trim())}, NULL, $sequelize_errorSchema, $sequelize_errorTable)`;\n\n    if (this._errorTableCount >= Number.MAX_SAFE_INTEGER) {\n      this._errorTableCount = 0;\n    }\n\n    return {\n      query,\n      bind: {\n        sequelize_errorSchema: { ParamType: 'INOUT', Data: 'ERRORSCHEMA' },\n        sequelize_errorTable: { ParamType: 'INOUT', Data: `ERRORTABLE${this._errorTableCount++}` },\n      },\n    };\n  }\n\n  listSchemasQuery(options) {\n    const schemasToSkip = ['NULLID', 'SQLJ', 'ERRORSCHEMA'];\n    if (options?.skip) {\n      schemasToSkip.push(...options.skip);\n    }\n\n    return `SELECT SCHEMANAME AS \"schema_name\" FROM SYSCAT.SCHEMATA WHERE (SCHEMANAME NOT LIKE 'SYS%') AND SCHEMANAME NOT IN (${schemasToSkip.map(schema => this.escape(schema)).join(', ')});`;\n  }\n\n  versionQuery() {\n    return 'select service_level as VERSION from TABLE (sysproc.env_get_inst_info()) as A';\n  }\n\n  createTableQuery(tableName, attributes, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'createTableQuery',\n        this.dialect.name,\n        CREATE_TABLE_QUERY_SUPPORTABLE_OPTIONS,\n        CREATE_TABLE_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const query = 'CREATE TABLE IF NOT EXISTS <%= table %> (<%= attributes %>)';\n    const primaryKeys = [];\n    const foreignKeys = {};\n    const attrStr = [];\n    const commentTemplate = ' -- <%= comment %>, '\n          + 'TableName = <%= table %>, ColumnName = <%= column %>;';\n\n    let commentStr = '';\n\n    for (const attr in attributes) {\n      if (Object.hasOwn(attributes, attr)) {\n        let dataType = attributes[attr];\n        let match;\n\n        if (dataType.includes('COMMENT ')) {\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\n          if (commentMatch && commentMatch.length > 2) {\n            const commentText = commentMatch[2].replace(/COMMENT/, '').trim();\n            commentStr += _.template(commentTemplate, this._templateSettings)({\n              table: this.quoteTable(tableName),\n              comment: this.escape(commentText),\n              column: this.quoteIdentifier(attr),\n            });\n            // remove comment related substring from dataType\n            dataType = commentMatch[1];\n          }\n        }\n\n        if (_.includes(dataType, 'PRIMARY KEY')) {\n          primaryKeys.push(attr);\n\n          if (_.includes(dataType, 'REFERENCES')) {\n            // Db2 doesn't support inline REFERENCES declarations: move to the end\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\n            attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace(/PRIMARY KEY/, '')}`);\n            foreignKeys[attr] = match[2];\n          } else {\n            attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace(/PRIMARY KEY/, '')}`);\n          }\n        } else if (_.includes(dataType, 'REFERENCES')) {\n          // Db2 doesn't support inline REFERENCES declarations: move to the end\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\n          foreignKeys[attr] = match[2];\n        } else {\n          if (options && options.uniqueKeys) {\n            for (const ukey in options.uniqueKeys) {\n              if (options.uniqueKeys[ukey].fields.includes(attr)\n                  && !_.includes(dataType, 'NOT NULL')) {\n                dataType += ' NOT NULL';\n                break;\n              }\n            }\n          }\n\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n        }\n\n      }\n    }\n\n    const values = {\n      table: this.quoteTable(tableName),\n      attributes: attrStr.join(', '),\n    };\n    const pkString = primaryKeys.map(pk => {\n      return this.quoteIdentifier(pk);\n    }).join(', ');\n\n    if (options && options.uniqueKeys) {\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        if (!_.isString(indexName)) {\n          indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n        }\n\n        values.attributes += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n      });\n    }\n\n    if (pkString.length > 0) {\n      values.attributes += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.hasOwn(foreignKeys, fkey)) {\n        values.attributes += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    return `${_.template(query, this._templateSettings)(values).trim()};${commentStr}`;\n  }\n\n  renameTableQuery(before, after) {\n    const query = 'RENAME TABLE <%= before %> TO <%= after %>;';\n\n    return _.template(query, this._templateSettings)({\n      before: this.quoteTable(before),\n      after: this.quoteTable(after),\n    });\n  }\n\n  showTablesQuery() {\n    return 'SELECT TABNAME AS \"tableName\", TRIM(TABSCHEMA) AS \"tableSchema\" FROM SYSCAT.TABLES WHERE TABSCHEMA = USER AND TYPE = \\'T\\' ORDER BY TABSCHEMA, TABNAME';\n  }\n\n  tableExistsQuery(table) {\n    const tableName = table.tableName || table;\n    // The default schema is the authorization ID of the owner of the plan or package.\n    // https://www.ibm.com/docs/en/db2-for-zos/12?topic=concepts-db2-schemas-schema-qualifiers\n    const schemaName = table.schema || this.sequelize.config.username.toUpperCase();\n\n    // https://www.ibm.com/docs/en/db2-for-zos/11?topic=tables-systables\n    return `SELECT name FROM sysibm.systables WHERE NAME = ${this.escape(tableName)} AND CREATOR = ${this.escape(schemaName)}`;\n  }\n\n  addColumnQuery(table, key, dataType, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'addColumnQuery',\n        this.dialect.name,\n        ADD_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        ADD_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    dataType = {\n      ...dataType,\n      // TODO: attributeToSQL SHOULD be using attributes in addColumnQuery\n      //       but instead we need to pass the key along as the field here\n      field: key,\n      type: normalizeDataType(dataType.type, this.dialect),\n    };\n\n    const query = 'ALTER TABLE <%= table %> ADD <%= attribute %>;';\n    const attribute = _.template('<%= key %> <%= definition %>', this._templateSettings)({\n      key: this.quoteIdentifier(key),\n      definition: this.attributeToSQL(dataType, {\n        context: 'addColumn',\n      }),\n    });\n\n    return _.template(query, this._templateSettings)({\n      table: this.quoteTable(table),\n      attribute,\n    });\n  }\n\n  removeColumnQuery(tableName, attributeName, options) {\n    if (options) {\n      rejectInvalidOptions(\n        'removeColumnQuery',\n        this.dialect.name,\n        REMOVE_COLUMN_QUERY_SUPPORTABLE_OPTIONS,\n        REMOVE_COLUMN_QUERY_SUPPORTED_OPTIONS,\n        options,\n      );\n    }\n\n    const query = 'ALTER TABLE <%= tableName %> DROP COLUMN <%= attributeName %>;';\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      attributeName: this.quoteIdentifier(attributeName),\n    });\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> <%= query %>;';\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      const attrValue = attributes[attributeName];\n      let defs = [attrValue];\n      if (Array.isArray(attrValue)) {\n        defs = attrValue;\n      }\n\n      for (const definition of defs) {\n        if (/REFERENCES/.test(definition)) {\n          constraintString.push(_.template('<%= fkName %> FOREIGN KEY (<%= attrName %>) <%= definition %>', this._templateSettings)({\n            fkName: this.quoteIdentifier(`${attributeName}_foreign_idx`),\n            attrName: this.quoteIdentifier(attributeName),\n            definition: definition.replace(/.+?(?=REFERENCES)/, ''),\n          }));\n        } else if (_.startsWith(definition, 'DROP ')) {\n          attrString.push(_.template('<%= attrName %> <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition,\n          }));\n        } else {\n          attrString.push(_.template('<%= attrName %> SET <%= definition %>', this._templateSettings)({\n            attrName: this.quoteIdentifier(attributeName),\n            definition,\n          }));\n        }\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length > 0) {\n      finalQuery += `ALTER COLUMN ${attrString.join(' ALTER COLUMN ')}`;\n      finalQuery += constraintString.length > 0 ? ' ' : '';\n    }\n\n    if (constraintString.length > 0) {\n      finalQuery += `ADD CONSTRAINT ${constraintString.join(' ADD CONSTRAINT ')}`;\n    }\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      query: finalQuery,\n    });\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const query = 'ALTER TABLE <%= tableName %> RENAME COLUMN <%= before %> TO <%= after %>;';\n    const newName = Object.keys(attributes)[0];\n\n    return _.template(query, this._templateSettings)({\n      tableName: this.quoteTable(tableName),\n      before: this.quoteIdentifier(attrBefore),\n      after: this.quoteIdentifier(newName),\n    });\n  }\n\n  addConstraintQuery(tableName, options) {\n    options = options || {};\n    if (options.onUpdate && options.onUpdate.toUpperCase() === 'CASCADE') {\n      // Db2 does not support ON UPDATE CASCADE, remove it.\n      delete options.onUpdate;\n    }\n\n    const constraintSnippet = this.getConstraintSnippet(tableName, options);\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    return `ALTER TABLE ${tableName} ADD ${constraintSnippet};`;\n  }\n\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\n    options = options || {};\n    attributes = attributes || {};\n    let query = 'INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>;';\n    if (options.returning) {\n      query = 'SELECT * FROM FINAL TABLE (INSERT INTO <%= table %> (<%= attributes %>)<%= output %> VALUES <%= tuples %>);';\n    }\n\n    const emptyQuery = 'INSERT INTO <%= table %>';\n    const tuples = [];\n    const allAttributes = [];\n    const allQueries = [];\n\n    let outputFragment;\n    const valuesForEmptyQuery = [];\n\n    if (options.returning) {\n      outputFragment = '';\n    }\n\n    _.forEach(attrValueHashes, attrValueHash => {\n      // special case for empty objects with primary keys\n      const fields = Object.keys(attrValueHash);\n      const firstAttr = attributes[fields[0]];\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\n        valuesForEmptyQuery.push(`(${this.autoGenValue++})`);\n\n        return;\n      }\n\n      // normal case\n      _.forOwn(attrValueHash, (value, key) => {\n        if (!allAttributes.includes(key)) {\n          if (value === null && attributes[key] && attributes[key].autoIncrement) {\n            return;\n          }\n\n          allAttributes.push(key);\n        }\n      });\n    });\n    if (valuesForEmptyQuery.length > 0) {\n      allQueries.push(`${emptyQuery} VALUES ${valuesForEmptyQuery.join(',')}`);\n    }\n\n    if (allAttributes.length > 0) {\n      _.forEach(attrValueHashes, attrValueHash => {\n        tuples.push(`(${\n          // TODO: pass type of attribute & model\n          allAttributes.map(key => this.escape(attrValueHash[key] ?? null, { replacements: options.replacements })).join(',')})`);\n      });\n      allQueries.push(query);\n    }\n\n    const replacements = {\n      table: this.quoteTable(tableName),\n      attributes: allAttributes.map(attr => this.quoteIdentifier(attr)).join(','),\n      tuples,\n      output: outputFragment,\n    };\n\n    const generatedQuery = _.template(allQueries.join(';'), this._templateSettings)(replacements);\n\n    return generatedQuery;\n  }\n\n  updateQuery(tableName, attrValueHash, where, options, attributes) {\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\n    options = options || {};\n    _.defaults(options, this.options);\n    if (!options.limit) {\n      sql.query = `SELECT * FROM FINAL TABLE (${removeTrailingSemicolon(sql.query)});`;\n\n      return sql;\n    }\n\n    attrValueHash = removeNullishValuesFromHash(attrValueHash, options.omitNull, options);\n\n    const modelAttributeMap = {};\n    const values = [];\n    const bind = {};\n    const bindParam = options.bindParam || this.bindParam(bind);\n\n    if (attributes) {\n      _.each(attributes, (attribute, key) => {\n        modelAttributeMap[key] = attribute;\n        if (attribute.field) {\n          modelAttributeMap[attribute.field] = attribute;\n        }\n      });\n    }\n\n    for (const key in attrValueHash) {\n      const value = attrValueHash[key] ?? null;\n      const escapedValue = this.escape(value, {\n        // TODO: pass model\n        type: modelAttributeMap[key]?.type,\n        replacements: options.replacements,\n        bindParam,\n      });\n\n      values.push(`${this.quoteIdentifier(key)}=${escapedValue}`);\n    }\n\n    let query;\n    const whereOptions = _.defaults({ bindParam }, options);\n\n    query = `UPDATE (SELECT * FROM ${this.quoteTable(tableName)} ${this.whereQuery(where, whereOptions)} FETCH NEXT ${this.escape(options.limit, undefined, { replacements: options.replacements })} ROWS ONLY) SET ${values.join(',')}`;\n    query = `SELECT * FROM FINAL TABLE (${query});`;\n\n    return { query, bind };\n  }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\n    const primaryKeysColumns = [];\n    const identityColumns = [];\n    const uniqueAttrs = [];\n    const tableNameQuoted = this.quoteTable(tableName);\n\n    const modelDefinition = model.modelDefinition;\n    // Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\n    const attributes = modelDefinition.attributes;\n    for (const attribute of attributes.values()) {\n      if (attribute.primaryKey) {\n        primaryKeysColumns.push(attribute.columnName);\n      }\n\n      if (attribute.autoIncrement) {\n        identityColumns.push(attribute.columnName);\n      }\n    }\n\n    // Add unique indexes defined by indexes option to uniqueAttrs\n    for (const index of model.getIndexes()) {\n      if (index.unique && index.fields) {\n        for (const field of index.fields) {\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\n          // TODO: \"index.fields\" are column names, not an attribute name. This is a bug.\n          if (!uniqueAttrs.includes(fieldName) && attributes.has(fieldName)) {\n            uniqueAttrs.push(fieldName);\n          }\n        }\n      }\n    }\n\n    const updateKeys = Object.keys(updateValues);\n    const insertKeys = Object.keys(insertValues);\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\n    const insertValuesEscaped = insertKeys.map(key => {\n      return this.escape(insertValues[key], {\n        // TODO: pass type\n        // TODO: bind param\n        replacements: options.replacements,\n        model,\n      });\n    }).join(', ');\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; // Virtual Table\n    let joinCondition;\n\n    // Filter NULL Clauses\n    const clauses = where[Op.or].filter(clause => {\n      let valid = true;\n      /*\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\n       */\n      for (const key of Object.keys(clause)) {\n        if (clause[key] == null) {\n          valid = false;\n          break;\n        }\n      }\n\n      return valid;\n    });\n\n    /*\n     * Generate ON condition using PK(s).\n     * If not, generate using UK(s). Else throw error\n     */\n    const getJoinSnippet = array => {\n      return array.map(key => {\n        key = this.quoteIdentifier(key);\n\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\n      });\n    };\n\n    if (clauses.length === 0) {\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\n    } else {\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\n      for (const key in clauses) {\n        const keys = Object.keys(clauses[key]);\n        const columnName = modelDefinition.getColumnNameLoose(keys[0]);\n\n        if (primaryKeysColumns.includes(columnName)) {\n          joinCondition = getJoinSnippet(primaryKeysColumns).join(' AND ');\n          break;\n        }\n      }\n\n      if (!joinCondition) {\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\n      }\n    }\n\n    // Remove the IDENTITY_INSERT Column from update\n    const filteredUpdateClauses = updateKeys.filter(key => {\n      if (!identityColumns.includes(key)) {\n        return true;\n      }\n\n      return false;\n    })\n      .map(key => {\n        const value = this.escape(updateValues[key], undefined, { replacements: options.replacements });\n        key = this.quoteIdentifier(key);\n\n        return `${targetTableAlias}.${key} = ${value}`;\n      }).join(', ');\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses}` : '';\n\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\n\n    let query = `MERGE INTO ${tableNameQuoted} AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet};`;\n\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    const table = this.quoteTable(tableName);\n    let query = `DELETE FROM ${table}`;\n\n    const whereSql = this.whereQuery(where, { ...options, model });\n    if (whereSql) {\n      query += ` ${whereSql}`;\n    }\n\n    query += this.addLimitAndOffset(options);\n\n    return query;\n  }\n\n  addIndexQuery(tableName, attributes, options, rawTablename) {\n    if ('include' in attributes && !attributes.unique) {\n      throw new Error('DB2 does not support non-unique indexes with INCLUDE syntax.');\n    }\n\n    return super.addIndexQuery(tableName, attributes, options, rawTablename);\n  }\n\n  showConstraintsQuery(tableName, constraintName) {\n    let sql = `SELECT CONSTNAME AS \"constraintName\", TRIM(TABSCHEMA) AS \"schemaName\", TABNAME AS \"tableName\" FROM SYSCAT.TABCONST WHERE TABNAME = '${tableName}'`;\n\n    if (constraintName) {\n      sql += ` AND CONSTNAME LIKE '%${constraintName}%'`;\n    }\n\n    return `${sql} ORDER BY CONSTNAME;`;\n  }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute,\n      };\n    }\n\n    let template;\n    let changeNull = 1;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      // enums are a special case\n      template = attribute.type.toSql({ dialect: this.dialect });\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.type.options.values.map(value => {\n        return this.escape(value, undefined, { replacements: options?.replacements });\n      }).join(', ')}))`;\n    } else {\n      template = attributeTypeToSql(attribute.type, { dialect: this.dialect });\n    }\n\n    if (options && options.context === 'changeColumn' && attribute.type) {\n      template = `DATA TYPE ${template}`;\n    } else if (attribute.allowNull === false || attribute.primaryKey === true) {\n      template += ' NOT NULL';\n      changeNull = 0;\n    }\n\n    if (attribute.autoIncrement) {\n      let initialValue = 1;\n      if (attribute.initialAutoIncrement) {\n        initialValue = attribute.initialAutoIncrement;\n      }\n\n      template += ` GENERATED BY DEFAULT AS IDENTITY(START WITH ${initialValue}, INCREMENT BY 1)`;\n    }\n\n    // Blobs/texts cannot have a defaultValue\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true\n        && defaultValueSchemable(attribute.defaultValue)) {\n      template += ` DEFAULT ${this.escape(attribute.defaultValue, { replacements: options?.replacements, type: attribute.type })}`;\n    }\n\n    if (attribute.unique === true && (options?.context !== 'changeColumn' || this.dialect.supports.alterColumn.unique)) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    if ((!options || !options.withoutForeignKeyConstraints) && attribute.references) {\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = `${options.tableName}_${attrName}_fidx`;\n        template += `, CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.table)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() !== 'CASCADE') {\n        // Db2 do not support CASCADE option for ON UPDATE clause.\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    if (options && options.context === 'changeColumn' && changeNull === 1\n        && attribute.allowNull !== undefined) {\n      template = [template];\n      if (attribute.allowNull) {\n        template.push('DROP NOT NULL');\n      } else {\n        template.push('NOT NULL');\n      }\n    }\n\n    if (attribute.comment && typeof attribute.comment === 'string') {\n      template += ` COMMENT ${attribute.comment}`;\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = {};\n    const existingConstraints = [];\n    let key;\n    let attribute;\n\n    for (key in attributes) {\n      attribute = attributes[key];\n\n      if (attribute.references) {\n\n        if (existingConstraints.includes(this.quoteTable(attribute.references.table))) {\n          // no cascading constraints to a table more than once\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else if (attribute.unique && attribute.unique === true) {\n          attribute.onDelete = '';\n          attribute.onUpdate = '';\n        } else {\n          existingConstraints.push(this.quoteTable(attribute.references.table));\n        }\n      }\n\n      if (key && !attribute.field && typeof attribute === 'object') {\n        attribute.field = key;\n      }\n\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  createTrigger() {\n    throwMethodUndefined('createTrigger');\n  }\n\n  dropTrigger() {\n    throwMethodUndefined('dropTrigger');\n  }\n\n  renameTrigger() {\n    throwMethodUndefined('renameTrigger');\n  }\n\n  createFunction() {\n    throwMethodUndefined('createFunction');\n  }\n\n  dropFunction() {\n    throwMethodUndefined('dropFunction');\n  }\n\n  renameFunction() {\n    throwMethodUndefined('renameFunction');\n  }\n\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return _.template('ALTER TABLE <%= table %> DROP FOREIGN KEY <%= key %>;', this._templateSettings)({\n      table: this.quoteTable(tableName),\n      key: this.quoteIdentifier(foreignKey),\n    });\n  }\n\n  setAutocommitQuery() {\n    return '';\n  }\n\n  setIsolationLevelQuery() {}\n\n  generateTransactionId() {\n    return randomBytes(10).toString('hex');\n  }\n\n  startTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'BEGIN TRANSACTION;';\n  }\n\n  commitTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return;\n    }\n\n    return 'COMMIT TRANSACTION;';\n  }\n\n  rollbackTransactionQuery(transaction) {\n    if (transaction.parent) {\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\n    }\n\n    return 'ROLLBACK TRANSACTION;';\n  }\n\n  addLimitAndOffset(options) {\n    const offset = options.offset || 0;\n    let fragment = '';\n\n    if (offset) {\n      fragment += ` OFFSET ${this.escape(offset, { replacements: options.replacements })} ROWS`;\n    }\n\n    if (options.limit) {\n      fragment += ` FETCH NEXT ${this.escape(options.limit, { replacements: options.replacements })} ROWS ONLY`;\n    }\n\n    return fragment;\n  }\n\n  addUniqueFields(dataValues, rawAttributes, uniqno) {\n    uniqno = uniqno === undefined ? 1 : uniqno;\n    for (const key in rawAttributes) {\n      if (rawAttributes[key].unique && dataValues[key] === undefined) {\n        if (rawAttributes[key].type instanceof DataTypes.DATE) {\n          dataValues[key] = new Date();\n        } else if (rawAttributes[key].type instanceof DataTypes.STRING) {\n          dataValues[key] = `unique${uniqno++}`;\n        } else if (rawAttributes[key].type instanceof DataTypes.INTEGER) {\n          dataValues[key] = uniqno++;\n        } else if (rawAttributes[key].type instanceof DataTypes.BOOLEAN) {\n          dataValues[key] = new DataTypes.BOOLEAN(false);\n        }\n      }\n    }\n\n    return uniqno;\n  }\n}\n\n/**\n * @param {string} identifier\n * @deprecated use \"escape\" or \"escapeString\" on QueryGenerator\n */\nfunction wrapSingleQuote(identifier) {\n  if (identifier) {\n    return `'${identifier}'`;\n  }\n\n  return '';\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,mBAAqC;AACrC,oBAA4C;AAC5C,oBAAwC;AACxC,iCAAsC;AACtC,8BAAsD;AACtD,6BAKO;AACP,wCAA4C;AAE5C,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,YAAY,QAAQ,kBAAkB;AAC5C,MAAM,cAAc,QAAQ,aAAa,EAAE;AAC3C,MAAM,EAAE,GAAG,IAAI,QAAQ,iBAAiB;AAExC,MAAM,wCAAwC,oBAAI,IAAI;AACtD,MAAM,qCAAqC,oBAAI,IAAI;AACnD,MAAM,wCAAwC,oBAAI,IAAI;AACtD,MAAM,uCAAuC,oBAAI,IAAI,CAAC,YAAY,CAAC;AAGnE,SAAS,qBAAqB,YAAY;AACxC,QAAM,IAAI,MAAM,eAAe,gEAAgE;AACjG;AAEO,MAAM,0BAA0B,8DAA4B;AAAA,EACjE,YAAY,SAAS;AACnB,UAAM,OAAO;AAEb,SAAK,gBAAgB,mBAAmB,GAAG,QAAQ,aAAa;AAChE,SAAK,gBAAgB,mBAAmB,GAAG,WAAW,iBAAiB;AAEvE,SAAK,eAAe;AAAA,EACtB;AAAA,EAEA,kBAAkB,QAAQ,SAAS;AACjC,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,WAAO,iBAAiB,KAAK,gBAAgB,MAAM;AAAA,EACrD;AAAA,EAEA,mBAAmB;AAAA,EAEnB,gBAAgB,QAAQ;AAItB,UAAM,QAAQ,kCAAkC,KAAK,OAAO,OAAO,KAAK,CAAC;AAEzE,QAAI,KAAK,oBAAoB,OAAO,kBAAkB;AACpD,WAAK,mBAAmB;AAAA,IAC1B;AAEA,WAAO;AAAA,MACL;AAAA,MACA,MAAM;AAAA,QACJ,uBAAuB,EAAE,WAAW,SAAS,MAAM,cAAc;AAAA,QACjE,sBAAsB,EAAE,WAAW,SAAS,MAAM,aAAa,KAAK,qBAAqB;AAAA,MAC3F;AAAA,IACF;AAAA,EACF;AAAA,EAEA,iBAAiB,SAAS;AACxB,UAAM,gBAAgB,CAAC,UAAU,QAAQ,aAAa;AACtD,QAAI,mCAAS,MAAM;AACjB,oBAAc,KAAK,GAAG,QAAQ,IAAI;AAAA,IACpC;AAEA,WAAO,qHAAqH,cAAc,IAAI,YAAU,KAAK,OAAO,MAAM,CAAC,EAAE,KAAK,IAAI;AAAA,EACxL;AAAA,EAEA,eAAe;AACb,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,WAAW,YAAY,SAAS;AAC/C,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,UAAM,QAAQ;AACd,UAAM,cAAc,CAAC;AACrB,UAAM,cAAc,CAAC;AACrB,UAAM,UAAU,CAAC;AACjB,UAAM,kBAAkB;AAGxB,QAAI,aAAa;AAEjB,eAAW,QAAQ,YAAY;AAC7B,UAAI,OAAO,OAAO,YAAY,IAAI,GAAG;AACnC,YAAI,WAAW,WAAW,IAAI;AAC9B,YAAI;AAEJ,YAAI,SAAS,SAAS,UAAU,GAAG;AACjC,gBAAM,eAAe,SAAS,MAAM,oBAAoB;AACxD,cAAI,gBAAgB,aAAa,SAAS,GAAG;AAC3C,kBAAM,cAAc,aAAa,CAAC,EAAE,QAAQ,WAAW,EAAE,EAAE,KAAK;AAChE,0BAAc,EAAE,SAAS,iBAAiB,KAAK,iBAAiB,EAAE;AAAA,cAChE,OAAO,KAAK,WAAW,SAAS;AAAA,cAChC,SAAS,KAAK,OAAO,WAAW;AAAA,cAChC,QAAQ,KAAK,gBAAgB,IAAI;AAAA,YACnC,CAAC;AAED,uBAAW,aAAa,CAAC;AAAA,UAC3B;AAAA,QACF;AAEA,YAAI,EAAE,SAAS,UAAU,aAAa,GAAG;AACvC,sBAAY,KAAK,IAAI;AAErB,cAAI,EAAE,SAAS,UAAU,YAAY,GAAG;AAEtC,oBAAQ,SAAS,MAAM,uBAAuB;AAC9C,oBAAQ,KAAK,GAAG,KAAK,gBAAgB,IAAI,KAAK,MAAM,CAAC,EAAE,QAAQ,eAAe,EAAE,GAAG;AACnF,wBAAY,IAAI,IAAI,MAAM,CAAC;AAAA,UAC7B,OAAO;AACL,oBAAQ,KAAK,GAAG,KAAK,gBAAgB,IAAI,KAAK,SAAS,QAAQ,eAAe,EAAE,GAAG;AAAA,UACrF;AAAA,QACF,WAAW,EAAE,SAAS,UAAU,YAAY,GAAG;AAE7C,kBAAQ,SAAS,MAAM,uBAAuB;AAC9C,kBAAQ,KAAK,GAAG,KAAK,gBAAgB,IAAI,KAAK,MAAM,CAAC,GAAG;AACxD,sBAAY,IAAI,IAAI,MAAM,CAAC;AAAA,QAC7B,OAAO;AACL,cAAI,WAAW,QAAQ,YAAY;AACjC,uBAAW,QAAQ,QAAQ,YAAY;AACrC,kBAAI,QAAQ,WAAW,IAAI,EAAE,OAAO,SAAS,IAAI,KAC1C,CAAC,EAAE,SAAS,UAAU,UAAU,GAAG;AACxC,4BAAY;AACZ;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAEA,kBAAQ,KAAK,GAAG,KAAK,gBAAgB,IAAI,KAAK,UAAU;AAAA,QAC1D;AAAA,MAEF;AAAA,IACF;AAEA,UAAM,SAAS;AAAA,MACb,OAAO,KAAK,WAAW,SAAS;AAAA,MAChC,YAAY,QAAQ,KAAK,IAAI;AAAA,IAC/B;AACA,UAAM,WAAW,YAAY,IAAI,QAAM;AACrC,aAAO,KAAK,gBAAgB,EAAE;AAAA,IAChC,CAAC,EAAE,KAAK,IAAI;AAEZ,QAAI,WAAW,QAAQ,YAAY;AACjC,QAAE,KAAK,QAAQ,YAAY,CAAC,SAAS,cAAc;AACjD,YAAI,CAAC,EAAE,SAAS,SAAS,GAAG;AAC1B,sBAAY,QAAQ,aAAa,QAAQ,OAAO,KAAK,GAAG;AAAA,QAC1D;AAEA,eAAO,cAAc,gBAAgB,KAAK,gBAAgB,SAAS,aAAa,QAAQ,OAAO,IAAI,WAAS,KAAK,gBAAgB,KAAK,CAAC,EAAE,KAAK,IAAI;AAAA,MACpJ,CAAC;AAAA,IACH;AAEA,QAAI,SAAS,SAAS,GAAG;AACvB,aAAO,cAAc,kBAAkB;AAAA,IACzC;AAEA,eAAW,QAAQ,aAAa;AAC9B,UAAI,OAAO,OAAO,aAAa,IAAI,GAAG;AACpC,eAAO,cAAc,kBAAkB,KAAK,gBAAgB,IAAI,MAAM,YAAY,IAAI;AAAA,MACxF;AAAA,IACF;AAEA,WAAO,GAAG,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE,MAAM,EAAE,KAAK,KAAK;AAAA,EACxE;AAAA,EAEA,iBAAiB,QAAQ,OAAO;AAC9B,UAAM,QAAQ;AAEd,WAAO,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE;AAAA,MAC/C,QAAQ,KAAK,WAAW,MAAM;AAAA,MAC9B,OAAO,KAAK,WAAW,KAAK;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB;AAChB,WAAO;AAAA,EACT;AAAA,EAEA,iBAAiB,OAAO;AACtB,UAAM,YAAY,MAAM,aAAa;AAGrC,UAAM,aAAa,MAAM,UAAU,KAAK,UAAU,OAAO,SAAS,YAAY;AAG9E,WAAO,kDAAkD,KAAK,OAAO,SAAS,mBAAmB,KAAK,OAAO,UAAU;AAAA,EACzH;AAAA,EAEA,eAAe,OAAO,KAAK,UAAU,SAAS;AAC5C,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,eAAW;AAAA,MACT,GAAG;AAAA;AAAA;AAAA,MAGH,OAAO;AAAA,MACP,UAAM,2CAAkB,SAAS,MAAM,KAAK,OAAO;AAAA,IACrD;AAEA,UAAM,QAAQ;AACd,UAAM,YAAY,EAAE,SAAS,gCAAgC,KAAK,iBAAiB,EAAE;AAAA,MACnF,KAAK,KAAK,gBAAgB,GAAG;AAAA,MAC7B,YAAY,KAAK,eAAe,UAAU;AAAA,QACxC,SAAS;AAAA,MACX,CAAC;AAAA,IACH,CAAC;AAED,WAAO,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE;AAAA,MAC/C,OAAO,KAAK,WAAW,KAAK;AAAA,MAC5B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,WAAW,eAAe,SAAS;AACnD,QAAI,SAAS;AACX;AAAA,QACE;AAAA,QACA,KAAK,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,UAAM,QAAQ;AAEd,WAAO,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE;AAAA,MAC/C,WAAW,KAAK,WAAW,SAAS;AAAA,MACpC,eAAe,KAAK,gBAAgB,aAAa;AAAA,IACnD,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,WAAW,YAAY;AACvC,UAAM,QAAQ;AACd,UAAM,aAAa,CAAC;AACpB,UAAM,mBAAmB,CAAC;AAE1B,eAAW,iBAAiB,YAAY;AACtC,YAAM,YAAY,WAAW,aAAa;AAC1C,UAAI,OAAO,CAAC,SAAS;AACrB,UAAI,MAAM,QAAQ,SAAS,GAAG;AAC5B,eAAO;AAAA,MACT;AAEA,iBAAW,cAAc,MAAM;AAC7B,YAAI,aAAa,KAAK,UAAU,GAAG;AACjC,2BAAiB,KAAK,EAAE,SAAS,iEAAiE,KAAK,iBAAiB,EAAE;AAAA,YACxH,QAAQ,KAAK,gBAAgB,GAAG,2BAA2B;AAAA,YAC3D,UAAU,KAAK,gBAAgB,aAAa;AAAA,YAC5C,YAAY,WAAW,QAAQ,qBAAqB,EAAE;AAAA,UACxD,CAAC,CAAC;AAAA,QACJ,WAAW,EAAE,WAAW,YAAY,OAAO,GAAG;AAC5C,qBAAW,KAAK,EAAE,SAAS,qCAAqC,KAAK,iBAAiB,EAAE;AAAA,YACtF,UAAU,KAAK,gBAAgB,aAAa;AAAA,YAC5C;AAAA,UACF,CAAC,CAAC;AAAA,QACJ,OAAO;AACL,qBAAW,KAAK,EAAE,SAAS,yCAAyC,KAAK,iBAAiB,EAAE;AAAA,YAC1F,UAAU,KAAK,gBAAgB,aAAa;AAAA,YAC5C;AAAA,UACF,CAAC,CAAC;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,QAAI,aAAa;AACjB,QAAI,WAAW,SAAS,GAAG;AACzB,oBAAc,gBAAgB,WAAW,KAAK,gBAAgB;AAC9D,oBAAc,iBAAiB,SAAS,IAAI,MAAM;AAAA,IACpD;AAEA,QAAI,iBAAiB,SAAS,GAAG;AAC/B,oBAAc,kBAAkB,iBAAiB,KAAK,kBAAkB;AAAA,IAC1E;AAEA,WAAO,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE;AAAA,MAC/C,WAAW,KAAK,WAAW,SAAS;AAAA,MACpC,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EAEA,kBAAkB,WAAW,YAAY,YAAY;AACnD,UAAM,QAAQ;AACd,UAAM,UAAU,OAAO,KAAK,UAAU,EAAE,CAAC;AAEzC,WAAO,EAAE,SAAS,OAAO,KAAK,iBAAiB,EAAE;AAAA,MAC/C,WAAW,KAAK,WAAW,SAAS;AAAA,MACpC,QAAQ,KAAK,gBAAgB,UAAU;AAAA,MACvC,OAAO,KAAK,gBAAgB,OAAO;AAAA,IACrC,CAAC;AAAA,EACH;AAAA,EAEA,mBAAmB,WAAW,SAAS;AACrC,cAAU,WAAW,CAAC;AACtB,QAAI,QAAQ,YAAY,QAAQ,SAAS,YAAY,MAAM,WAAW;AAEpE,aAAO,QAAQ;AAAA,IACjB;AAEA,UAAM,oBAAoB,KAAK,qBAAqB,WAAW,OAAO;AAEtE,QAAI,OAAO,cAAc,UAAU;AACjC,kBAAY,KAAK,iBAAiB,SAAS;AAAA,IAC7C,OAAO;AACL,kBAAY,KAAK,WAAW,SAAS;AAAA,IACvC;AAEA,WAAO,eAAe,iBAAiB;AAAA,EACzC;AAAA,EAEA,gBAAgB,WAAW,iBAAiB,SAAS,YAAY;AAC/D,cAAU,WAAW,CAAC;AACtB,iBAAa,cAAc,CAAC;AAC5B,QAAI,QAAQ;AACZ,QAAI,QAAQ,WAAW;AACrB,cAAQ;AAAA,IACV;AAEA,UAAM,aAAa;AACnB,UAAM,SAAS,CAAC;AAChB,UAAM,gBAAgB,CAAC;AACvB,UAAM,aAAa,CAAC;AAEpB,QAAI;AACJ,UAAM,sBAAsB,CAAC;AAE7B,QAAI,QAAQ,WAAW;AACrB,uBAAiB;AAAA,IACnB;AAEA,MAAE,QAAQ,iBAAiB,mBAAiB;AAE1C,YAAM,SAAS,OAAO,KAAK,aAAa;AACxC,YAAM,YAAY,WAAW,OAAO,CAAC,CAAC;AACtC,UAAI,OAAO,WAAW,KAAK,aAAa,UAAU,iBAAiB,cAAc,OAAO,CAAC,CAAC,MAAM,MAAM;AACpG,4BAAoB,KAAK,IAAI,KAAK,iBAAiB;AAEnD;AAAA,MACF;AAGA,QAAE,OAAO,eAAe,CAAC,OAAO,QAAQ;AACtC,YAAI,CAAC,cAAc,SAAS,GAAG,GAAG;AAChC,cAAI,UAAU,QAAQ,WAAW,GAAG,KAAK,WAAW,GAAG,EAAE,eAAe;AACtE;AAAA,UACF;AAEA,wBAAc,KAAK,GAAG;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,QAAI,oBAAoB,SAAS,GAAG;AAClC,iBAAW,KAAK,GAAG,qBAAqB,oBAAoB,KAAK,GAAG,GAAG;AAAA,IACzE;AAEA,QAAI,cAAc,SAAS,GAAG;AAC5B,QAAE,QAAQ,iBAAiB,mBAAiB;AAC1C,eAAO,KAAK;AAAA,QAEV,cAAc,IAAI,SAAO,KAAK,OAAO,cAAc,GAAG,KAAK,MAAM,EAAE,cAAc,QAAQ,aAAa,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI;AAAA,MAC1H,CAAC;AACD,iBAAW,KAAK,KAAK;AAAA,IACvB;AAEA,UAAM,eAAe;AAAA,MACnB,OAAO,KAAK,WAAW,SAAS;AAAA,MAChC,YAAY,cAAc,IAAI,UAAQ,KAAK,gBAAgB,IAAI,CAAC,EAAE,KAAK,GAAG;AAAA,MAC1E;AAAA,MACA,QAAQ;AAAA,IACV;AAEA,UAAM,iBAAiB,EAAE,SAAS,WAAW,KAAK,GAAG,GAAG,KAAK,iBAAiB,EAAE,YAAY;AAE5F,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,WAAW,eAAe,OAAO,SAAS,YAAY;AA1ZpE;AA2ZI,UAAM,MAAM,MAAM,YAAY,WAAW,eAAe,OAAO,SAAS,UAAU;AAClF,cAAU,WAAW,CAAC;AACtB,MAAE,SAAS,SAAS,KAAK,OAAO;AAChC,QAAI,CAAC,QAAQ,OAAO;AAClB,UAAI,QAAQ,kCAA8B,uCAAwB,IAAI,KAAK;AAE3E,aAAO;AAAA,IACT;AAEA,wBAAgB,2CAA4B,eAAe,QAAQ,UAAU,OAAO;AAEpF,UAAM,oBAAoB,CAAC;AAC3B,UAAM,SAAS,CAAC;AAChB,UAAM,OAAO,CAAC;AACd,UAAM,YAAY,QAAQ,aAAa,KAAK,UAAU,IAAI;AAE1D,QAAI,YAAY;AACd,QAAE,KAAK,YAAY,CAAC,WAAW,QAAQ;AACrC,0BAAkB,GAAG,IAAI;AACzB,YAAI,UAAU,OAAO;AACnB,4BAAkB,UAAU,KAAK,IAAI;AAAA,QACvC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,eAAW,OAAO,eAAe;AAC/B,YAAM,QAAQ,cAAc,GAAG,KAAK;AACpC,YAAM,eAAe,KAAK,OAAO,OAAO;AAAA;AAAA,QAEtC,OAAM,uBAAkB,GAAG,MAArB,mBAAwB;AAAA,QAC9B,cAAc,QAAQ;AAAA,QACtB;AAAA,MACF,CAAC;AAED,aAAO,KAAK,GAAG,KAAK,gBAAgB,GAAG,KAAK,cAAc;AAAA,IAC5D;AAEA,QAAI;AACJ,UAAM,eAAe,EAAE,SAAS,EAAE,UAAU,GAAG,OAAO;AAEtD,YAAQ,yBAAyB,KAAK,WAAW,SAAS,KAAK,KAAK,WAAW,OAAO,YAAY,gBAAgB,KAAK,OAAO,QAAQ,OAAO,QAAW,EAAE,cAAc,QAAQ,aAAa,CAAC,oBAAoB,OAAO,KAAK,GAAG;AACjO,YAAQ,8BAA8B;AAEtC,WAAO,EAAE,OAAO,KAAK;AAAA,EACvB;AAAA,EAEA,YAAY,WAAW,cAAc,cAAc,OAAO,OAAO,SAAS;AACxE,UAAM,mBAAmB,KAAK,WAAW,GAAG,kBAAkB;AAC9D,UAAM,mBAAmB,KAAK,WAAW,GAAG,kBAAkB;AAC9D,UAAM,qBAAqB,CAAC;AAC5B,UAAM,kBAAkB,CAAC;AACzB,UAAM,cAAc,CAAC;AACrB,UAAM,kBAAkB,KAAK,WAAW,SAAS;AAEjD,UAAM,kBAAkB,MAAM;AAE9B,UAAM,aAAa,gBAAgB;AACnC,eAAW,aAAa,WAAW,OAAO,GAAG;AAC3C,UAAI,UAAU,YAAY;AACxB,2BAAmB,KAAK,UAAU,UAAU;AAAA,MAC9C;AAEA,UAAI,UAAU,eAAe;AAC3B,wBAAgB,KAAK,UAAU,UAAU;AAAA,MAC3C;AAAA,IACF;AAGA,eAAW,SAAS,MAAM,WAAW,GAAG;AACtC,UAAI,MAAM,UAAU,MAAM,QAAQ;AAChC,mBAAW,SAAS,MAAM,QAAQ;AAChC,gBAAM,YAAY,OAAO,UAAU,WAAW,QAAQ,MAAM,QAAQ,MAAM;AAE1E,cAAI,CAAC,YAAY,SAAS,SAAS,KAAK,WAAW,IAAI,SAAS,GAAG;AACjE,wBAAY,KAAK,SAAS;AAAA,UAC5B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,UAAM,aAAa,OAAO,KAAK,YAAY;AAC3C,UAAM,aAAa,OAAO,KAAK,YAAY;AAC3C,UAAM,mBAAmB,WAAW,IAAI,SAAO,KAAK,gBAAgB,GAAG,CAAC,EAAE,KAAK,IAAI;AACnF,UAAM,sBAAsB,WAAW,IAAI,SAAO;AAChD,aAAO,KAAK,OAAO,aAAa,GAAG,GAAG;AAAA;AAAA;AAAA,QAGpC,cAAc,QAAQ;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,IAAI;AACZ,UAAM,mBAAmB,UAAU;AACnC,QAAI;AAGJ,UAAM,UAAU,MAAM,GAAG,EAAE,EAAE,OAAO,YAAU;AAC5C,UAAI,QAAQ;AAIZ,iBAAW,OAAO,OAAO,KAAK,MAAM,GAAG;AACrC,YAAI,OAAO,GAAG,KAAK,MAAM;AACvB,kBAAQ;AACR;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT,CAAC;AAMD,UAAM,iBAAiB,WAAS;AAC9B,aAAO,MAAM,IAAI,SAAO;AACtB,cAAM,KAAK,gBAAgB,GAAG;AAE9B,eAAO,GAAG,oBAAoB,SAAS,oBAAoB;AAAA,MAC7D,CAAC;AAAA,IACH;AAEA,QAAI,QAAQ,WAAW,GAAG;AACxB,YAAM,IAAI,MAAM,4DAA4D;AAAA,IAC9E,OAAO;AAEL,iBAAW,OAAO,SAAS;AACzB,cAAM,OAAO,OAAO,KAAK,QAAQ,GAAG,CAAC;AACrC,cAAM,aAAa,gBAAgB,mBAAmB,KAAK,CAAC,CAAC;AAE7D,YAAI,mBAAmB,SAAS,UAAU,GAAG;AAC3C,0BAAgB,eAAe,kBAAkB,EAAE,KAAK,OAAO;AAC/D;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,eAAe;AAClB,wBAAgB,eAAe,WAAW,EAAE,KAAK,OAAO;AAAA,MAC1D;AAAA,IACF;AAGA,UAAM,wBAAwB,WAAW,OAAO,SAAO;AACrD,UAAI,CAAC,gBAAgB,SAAS,GAAG,GAAG;AAClC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,CAAC,EACE,IAAI,SAAO;AACV,YAAM,QAAQ,KAAK,OAAO,aAAa,GAAG,GAAG,QAAW,EAAE,cAAc,QAAQ,aAAa,CAAC;AAC9F,YAAM,KAAK,gBAAgB,GAAG;AAE9B,aAAO,GAAG,oBAAoB,SAAS;AAAA,IACzC,CAAC,EAAE,KAAK,IAAI;AACd,UAAM,gBAAgB,sBAAsB,SAAS,IAAI,gCAAgC,0BAA0B;AAEnH,UAAM,gBAAgB,IAAI,4BAA4B;AAEtD,QAAI,QAAQ,cAAc,sBAAsB,2BAA2B,wBAAwB,oBAAoB,wBAAwB;AAC/I,aAAS,IAAI,8CAA8C;AAE3D,WAAO;AAAA,EACT;AAAA,EAEA,mBAAmB,WAAW;AAC5B,WAAO,kBAAkB,KAAK,WAAW,SAAS;AAAA,EACpD;AAAA,EAEA,YAAY,WAAW,OAAO,UAAU,CAAC,GAAG,OAAO;AACjD,UAAM,QAAQ,KAAK,WAAW,SAAS;AACvC,QAAI,QAAQ,eAAe;AAE3B,UAAM,WAAW,KAAK,WAAW,OAAO,EAAE,GAAG,SAAS,MAAM,CAAC;AAC7D,QAAI,UAAU;AACZ,eAAS,IAAI;AAAA,IACf;AAEA,aAAS,KAAK,kBAAkB,OAAO;AAEvC,WAAO;AAAA,EACT;AAAA,EAEA,cAAc,WAAW,YAAY,SAAS,cAAc;AAC1D,QAAI,aAAa,cAAc,CAAC,WAAW,QAAQ;AACjD,YAAM,IAAI,MAAM,8DAA8D;AAAA,IAChF;AAEA,WAAO,MAAM,cAAc,WAAW,YAAY,SAAS,YAAY;AAAA,EACzE;AAAA,EAEA,qBAAqB,WAAW,gBAAgB;AAC9C,QAAI,MAAM,uIAAuI;AAEjJ,QAAI,gBAAgB;AAClB,aAAO,yBAAyB;AAAA,IAClC;AAEA,WAAO,GAAG;AAAA,EACZ;AAAA,EAEA,eAAe,WAAW,SAAS;AACjC,QAAI,CAAC,EAAE,cAAc,SAAS,GAAG;AAC/B,kBAAY;AAAA,QACV,MAAM;AAAA,MACR;AAAA,IACF;AAEA,QAAI;AACJ,QAAI,aAAa;AAEjB,QAAI,UAAU,gBAAgB,UAAU,MAAM;AAE5C,iBAAW,UAAU,KAAK,MAAM,EAAE,SAAS,KAAK,QAAQ,CAAC;AACzD,kBAAY,WAAW,KAAK,gBAAgB,UAAU,KAAK,QAAQ,UAAU,KAAK,QAAQ,OAAO,IAAI,WAAS;AAC5G,eAAO,KAAK,OAAO,OAAO,QAAW,EAAE,cAAc,mCAAS,aAAa,CAAC;AAAA,MAC9E,CAAC,EAAE,KAAK,IAAI;AAAA,IACd,OAAO;AACL,qBAAW,4CAAmB,UAAU,MAAM,EAAE,SAAS,KAAK,QAAQ,CAAC;AAAA,IACzE;AAEA,QAAI,WAAW,QAAQ,YAAY,kBAAkB,UAAU,MAAM;AACnE,iBAAW,aAAa;AAAA,IAC1B,WAAW,UAAU,cAAc,SAAS,UAAU,eAAe,MAAM;AACzE,kBAAY;AACZ,mBAAa;AAAA,IACf;AAEA,QAAI,UAAU,eAAe;AAC3B,UAAI,eAAe;AACnB,UAAI,UAAU,sBAAsB;AAClC,uBAAe,UAAU;AAAA,MAC3B;AAEA,kBAAY,gDAAgD;AAAA,IAC9D;AAGA,QAAI,UAAU,SAAS,UAAU,UAAU,KAAK,YAAY,YACrD,kDAAsB,UAAU,YAAY,GAAG;AACpD,kBAAY,YAAY,KAAK,OAAO,UAAU,cAAc,EAAE,cAAc,mCAAS,cAAc,MAAM,UAAU,KAAK,CAAC;AAAA,IAC3H;AAEA,QAAI,UAAU,WAAW,UAAS,mCAAS,aAAY,kBAAkB,KAAK,QAAQ,SAAS,YAAY,SAAS;AAClH,kBAAY;AAAA,IACd;AAEA,QAAI,UAAU,YAAY;AACxB,kBAAY;AAAA,IACd;AAEA,SAAK,CAAC,WAAW,CAAC,QAAQ,iCAAiC,UAAU,YAAY;AAC/E,UAAI,WAAW,QAAQ,YAAY,eAAe,QAAQ,YAAY;AACpE,cAAM,WAAW,KAAK,gBAAgB,QAAQ,UAAU;AACxD,cAAM,SAAS,GAAG,QAAQ,aAAa;AACvC,oBAAY,gBAAgB,uBAAuB;AAAA,MACrD;AAEA,kBAAY,eAAe,KAAK,WAAW,UAAU,WAAW,KAAK;AAErE,UAAI,UAAU,WAAW,KAAK;AAC5B,oBAAY,KAAK,KAAK,gBAAgB,UAAU,WAAW,GAAG;AAAA,MAChE,OAAO;AACL,oBAAY,KAAK,KAAK,gBAAgB,IAAI;AAAA,MAC5C;AAEA,UAAI,UAAU,UAAU;AACtB,oBAAY,cAAc,UAAU,SAAS,YAAY;AAAA,MAC3D;AAEA,UAAI,UAAU,YAAY,UAAU,SAAS,YAAY,MAAM,WAAW;AAExE,oBAAY,cAAc,UAAU,SAAS,YAAY;AAAA,MAC3D;AAAA,IACF;AAEA,QAAI,WAAW,QAAQ,YAAY,kBAAkB,eAAe,KAC7D,UAAU,cAAc,QAAW;AACxC,iBAAW,CAAC,QAAQ;AACpB,UAAI,UAAU,WAAW;AACvB,iBAAS,KAAK,eAAe;AAAA,MAC/B,OAAO;AACL,iBAAS,KAAK,UAAU;AAAA,MAC1B;AAAA,IACF;AAEA,QAAI,UAAU,WAAW,OAAO,UAAU,YAAY,UAAU;AAC9D,kBAAY,YAAY,UAAU;AAAA,IACpC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,gBAAgB,YAAY,SAAS;AACnC,UAAM,SAAS,CAAC;AAChB,UAAM,sBAAsB,CAAC;AAC7B,QAAI;AACJ,QAAI;AAEJ,SAAK,OAAO,YAAY;AACtB,kBAAY,WAAW,GAAG;AAE1B,UAAI,UAAU,YAAY;AAExB,YAAI,oBAAoB,SAAS,KAAK,WAAW,UAAU,WAAW,KAAK,CAAC,GAAG;AAE7E,oBAAU,WAAW;AACrB,oBAAU,WAAW;AAAA,QACvB,WAAW,UAAU,UAAU,UAAU,WAAW,MAAM;AACxD,oBAAU,WAAW;AACrB,oBAAU,WAAW;AAAA,QACvB,OAAO;AACL,8BAAoB,KAAK,KAAK,WAAW,UAAU,WAAW,KAAK,CAAC;AAAA,QACtE;AAAA,MACF;AAEA,UAAI,OAAO,CAAC,UAAU,SAAS,OAAO,cAAc,UAAU;AAC5D,kBAAU,QAAQ;AAAA,MACpB;AAEA,aAAO,UAAU,SAAS,GAAG,IAAI,KAAK,eAAe,WAAW,OAAO;AAAA,IACzE;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,gBAAgB;AACd,yBAAqB,eAAe;AAAA,EACtC;AAAA,EAEA,cAAc;AACZ,yBAAqB,aAAa;AAAA,EACpC;AAAA,EAEA,gBAAgB;AACd,yBAAqB,eAAe;AAAA,EACtC;AAAA,EAEA,iBAAiB;AACf,yBAAqB,gBAAgB;AAAA,EACvC;AAAA,EAEA,eAAe;AACb,yBAAqB,cAAc;AAAA,EACrC;AAAA,EAEA,iBAAiB;AACf,yBAAqB,gBAAgB;AAAA,EACvC;AAAA,EAEA,oBAAoB,WAAW,YAAY;AACzC,WAAO,EAAE,SAAS,yDAAyD,KAAK,iBAAiB,EAAE;AAAA,MACjG,OAAO,KAAK,WAAW,SAAS;AAAA,MAChC,KAAK,KAAK,gBAAgB,UAAU;AAAA,IACtC,CAAC;AAAA,EACH;AAAA,EAEA,qBAAqB;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,yBAAyB;AAAA,EAAC;AAAA,EAE1B,wBAAwB;AACtB,WAAO,YAAY,EAAE,EAAE,SAAS,KAAK;AAAA,EACvC;AAAA,EAEA,sBAAsB,aAAa;AACjC,QAAI,YAAY,QAAQ;AACtB,aAAO,oBAAoB,KAAK,gBAAgB,YAAY,IAAI;AAAA,IAClE;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,uBAAuB,aAAa;AAClC,QAAI,YAAY,QAAQ;AACtB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,yBAAyB,aAAa;AACpC,QAAI,YAAY,QAAQ;AACtB,aAAO,wBAAwB,KAAK,gBAAgB,YAAY,IAAI;AAAA,IACtE;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB,SAAS;AACzB,UAAM,SAAS,QAAQ,UAAU;AACjC,QAAI,WAAW;AAEf,QAAI,QAAQ;AACV,kBAAY,WAAW,KAAK,OAAO,QAAQ,EAAE,cAAc,QAAQ,aAAa,CAAC;AAAA,IACnF;AAEA,QAAI,QAAQ,OAAO;AACjB,kBAAY,eAAe,KAAK,OAAO,QAAQ,OAAO,EAAE,cAAc,QAAQ,aAAa,CAAC;AAAA,IAC9F;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,gBAAgB,YAAY,eAAe,QAAQ;AACjD,aAAS,WAAW,SAAY,IAAI;AACpC,eAAW,OAAO,eAAe;AAC/B,UAAI,cAAc,GAAG,EAAE,UAAU,WAAW,GAAG,MAAM,QAAW;AAC9D,YAAI,cAAc,GAAG,EAAE,gBAAgB,UAAU,MAAM;AACrD,qBAAW,GAAG,IAAI,oBAAI,KAAK;AAAA,QAC7B,WAAW,cAAc,GAAG,EAAE,gBAAgB,UAAU,QAAQ;AAC9D,qBAAW,GAAG,IAAI,SAAS;AAAA,QAC7B,WAAW,cAAc,GAAG,EAAE,gBAAgB,UAAU,SAAS;AAC/D,qBAAW,GAAG,IAAI;AAAA,QACpB,WAAW,cAAc,GAAG,EAAE,gBAAgB,UAAU,SAAS;AAC/D,qBAAW,GAAG,IAAI,IAAI,UAAU,QAAQ,KAAK;AAAA,QAC/C;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AACF;AAMA,SAAS,gBAAgB,YAAY;AACnC,MAAI,YAAY;AACd,WAAO,IAAI;AAAA,EACb;AAEA,SAAO;AACT;",
  "names": []
}
