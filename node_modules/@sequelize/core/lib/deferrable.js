"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var deferrable_exports = {};
__export(deferrable_exports, {
  Deferrable: () => Deferrable
});
module.exports = __toCommonJS(deferrable_exports);
var import_isEqual = __toESM(require("lodash/isEqual"));
var import_class_to_invokable = require("./utils/class-to-invokable.js");
var import_object = require("./utils/object.js");
class Deferrable {
  toString() {
    return this.constructor.name;
  }
  toSql(_queryGenerator) {
    throw new Error("toSql implementation missing");
  }
  isEqual(_other) {
    throw new Error("isEqual implementation missing");
  }
  static INITIALLY_DEFERRED = (0, import_class_to_invokable.classToInvokable)(class INITIALLY_DEFERRED extends Deferrable {
    toSql() {
      return INITIALLY_DEFERRED.toSql();
    }
    static toSql() {
      return "DEFERRABLE INITIALLY DEFERRED";
    }
    isEqual(other) {
      return other instanceof INITIALLY_DEFERRED;
    }
  });
  static INITIALLY_IMMEDIATE = (0, import_class_to_invokable.classToInvokable)(class INITIALLY_IMMEDIATE extends Deferrable {
    toSql() {
      return INITIALLY_IMMEDIATE.toSql();
    }
    isEqual(other) {
      return other instanceof INITIALLY_IMMEDIATE;
    }
    static toSql() {
      return "DEFERRABLE INITIALLY IMMEDIATE";
    }
  });
  /**
   * Will set the constraints to not deferred. This is the default in PostgreSQL and it make
   * it impossible to dynamically defer the constraints within a transaction.
   */
  static NOT = (0, import_class_to_invokable.classToInvokable)(class NOT extends Deferrable {
    toSql() {
      return NOT.toSql();
    }
    isEqual(other) {
      return other instanceof NOT;
    }
    static toSql() {
      return "NOT DEFERRABLE";
    }
  });
  // TODO: move the following classes to their own namespace, as they are not related to the above classes
  //  the ones above are about configuring a constraint's deferrability when defining the constraint.
  //  The ones below are for configuring them during a transaction
  /**
   * Will trigger an additional query at the beginning of a
   * transaction which sets the constraints to deferred.
   */
  static SET_DEFERRED = (0, import_class_to_invokable.classToInvokable)(class SET_DEFERRED extends Deferrable {
    #constraints;
    /**
     * @param constraints An array of constraint names. Will defer all constraints by default.
     */
    constructor(constraints = import_object.EMPTY_ARRAY) {
      super();
      this.#constraints = Object.freeze([...constraints]);
    }
    toSql(queryGenerator) {
      return queryGenerator.setDeferredQuery(this.#constraints);
    }
    isEqual(other) {
      return other instanceof SET_DEFERRED && (0, import_isEqual.default)(this.#constraints, other.#constraints);
    }
    static toSql(queryGenerator) {
      return queryGenerator.setDeferredQuery(import_object.EMPTY_ARRAY);
    }
  });
  /**
   * Will trigger an additional query at the beginning of a
   * transaction which sets the constraints to immediately.
   */
  static SET_IMMEDIATE = (0, import_class_to_invokable.classToInvokable)(class SET_IMMEDIATE extends Deferrable {
    #constraints;
    /**
     * @param constraints An array of constraint names. Will defer all constraints by default.
     */
    constructor(constraints = import_object.EMPTY_ARRAY) {
      super();
      this.#constraints = Object.freeze([...constraints]);
    }
    toSql(queryGenerator) {
      return queryGenerator.setImmediateQuery(this.#constraints);
    }
    isEqual(other) {
      return other instanceof SET_IMMEDIATE && (0, import_isEqual.default)(this.#constraints, other.#constraints);
    }
    static toSql(queryGenerator) {
      return queryGenerator.setImmediateQuery(import_object.EMPTY_ARRAY);
    }
  });
}
//# sourceMappingURL=deferrable.js.map
