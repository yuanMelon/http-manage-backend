{
  "version": 3,
  "sources": ["../src/model-manager.js"],
  "sourcesContent": ["'use strict';\n\nconst Toposort = require('toposort-class');\nconst _ = require('lodash');\n\nexport class ModelManager {\n  constructor(sequelize) {\n    this.models = [];\n    this.sequelize = sequelize;\n  }\n\n  addModel(model) {\n    this.models.push(model);\n    this.sequelize.models[model.name] = model;\n\n    return model;\n  }\n\n  removeModel(modelToRemove) {\n    this.models = this.models.filter(model => model.name !== modelToRemove.name);\n\n    delete this.sequelize.models[modelToRemove.name];\n  }\n\n  getModel(modelName) {\n    return this.models.find(model => model.name === modelName);\n  }\n\n  findModel(callback) {\n    return this.models.find(callback);\n  }\n\n  hasModel(targetModel) {\n    return this.models.includes(targetModel);\n  }\n\n  get all() {\n    return this.models;\n  }\n\n  /**\n   * Returns an array that lists every model, sorted in order\n   * of foreign key references: The first model is a model that is depended upon,\n   * the last model is a model that is not depended upon.\n   *\n   * If there is a cyclic dependency, this returns null.\n   */\n  getModelsTopoSortedByForeignKey() {\n    const models = new Map();\n    const sorter = new Toposort();\n\n    const queryGenerator = this.sequelize.queryInterface.queryGenerator;\n\n    for (const model of this.models) {\n      let deps = [];\n      const tableName = queryGenerator.quoteTable(model);\n\n      models.set(tableName, model);\n\n      const { attributes } = model.modelDefinition;\n      for (const attrName of attributes.keys()) {\n        const attribute = attributes.get(attrName);\n\n        if (!attribute.references) {\n          continue;\n        }\n\n        const dep = queryGenerator.quoteTable(attribute.references.table);\n        deps.push(dep);\n      }\n\n      deps = deps.filter(dep => tableName !== dep);\n\n      sorter.add(tableName, deps);\n    }\n\n    let sorted;\n    try {\n      sorted = sorter.sort();\n    } catch (error) {\n      if (!error.message.startsWith('Cyclic dependency found.')) {\n        throw error;\n      }\n\n      return null;\n    }\n\n    return sorted\n      .map(modelName => {\n        return models.get(modelName);\n      })\n      .filter(Boolean);\n  }\n\n  /**\n   * Iterate over Models in an order suitable for e.g. creating tables.\n   * Will take foreign key constraints into account so that dependencies are visited before dependents.\n   *\n   * @param {Function} iterator method to execute on each model\n   * @param {object} options\n   * @private\n   *\n   * @deprecated\n   */\n  forEachModel(iterator, options) {\n    const sortedModels = this.getModelsTopoSortedByForeignKey();\n    if (sortedModels == null) {\n      throw new Error('Cyclic dependency found.');\n    }\n\n    options = _.defaults(options || {}, {\n      reverse: true,\n    });\n\n    if (options.reverse) {\n      sortedModels.reverse();\n    }\n\n    for (const model of sortedModels) {\n      iterator(model);\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,WAAW,QAAQ,gBAAgB;AACzC,MAAM,IAAI,QAAQ,QAAQ;AAEnB,MAAM,aAAa;AAAA,EACxB,YAAY,WAAW;AACrB,SAAK,SAAS,CAAC;AACf,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,SAAS,OAAO;AACd,SAAK,OAAO,KAAK,KAAK;AACtB,SAAK,UAAU,OAAO,MAAM,IAAI,IAAI;AAEpC,WAAO;AAAA,EACT;AAAA,EAEA,YAAY,eAAe;AACzB,SAAK,SAAS,KAAK,OAAO,OAAO,WAAS,MAAM,SAAS,cAAc,IAAI;AAE3E,WAAO,KAAK,UAAU,OAAO,cAAc,IAAI;AAAA,EACjD;AAAA,EAEA,SAAS,WAAW;AAClB,WAAO,KAAK,OAAO,KAAK,WAAS,MAAM,SAAS,SAAS;AAAA,EAC3D;AAAA,EAEA,UAAU,UAAU;AAClB,WAAO,KAAK,OAAO,KAAK,QAAQ;AAAA,EAClC;AAAA,EAEA,SAAS,aAAa;AACpB,WAAO,KAAK,OAAO,SAAS,WAAW;AAAA,EACzC;AAAA,EAEA,IAAI,MAAM;AACR,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,kCAAkC;AAChC,UAAM,SAAS,oBAAI,IAAI;AACvB,UAAM,SAAS,IAAI,SAAS;AAE5B,UAAM,iBAAiB,KAAK,UAAU,eAAe;AAErD,eAAW,SAAS,KAAK,QAAQ;AAC/B,UAAI,OAAO,CAAC;AACZ,YAAM,YAAY,eAAe,WAAW,KAAK;AAEjD,aAAO,IAAI,WAAW,KAAK;AAE3B,YAAM,EAAE,WAAW,IAAI,MAAM;AAC7B,iBAAW,YAAY,WAAW,KAAK,GAAG;AACxC,cAAM,YAAY,WAAW,IAAI,QAAQ;AAEzC,YAAI,CAAC,UAAU,YAAY;AACzB;AAAA,QACF;AAEA,cAAM,MAAM,eAAe,WAAW,UAAU,WAAW,KAAK;AAChE,aAAK,KAAK,GAAG;AAAA,MACf;AAEA,aAAO,KAAK,OAAO,SAAO,cAAc,GAAG;AAE3C,aAAO,IAAI,WAAW,IAAI;AAAA,IAC5B;AAEA,QAAI;AACJ,QAAI;AACF,eAAS,OAAO,KAAK;AAAA,IACvB,SAAS,OAAP;AACA,UAAI,CAAC,MAAM,QAAQ,WAAW,0BAA0B,GAAG;AACzD,cAAM;AAAA,MACR;AAEA,aAAO;AAAA,IACT;AAEA,WAAO,OACJ,IAAI,eAAa;AAChB,aAAO,OAAO,IAAI,SAAS;AAAA,IAC7B,CAAC,EACA,OAAO,OAAO;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,aAAa,UAAU,SAAS;AAC9B,UAAM,eAAe,KAAK,gCAAgC;AAC1D,QAAI,gBAAgB,MAAM;AACxB,YAAM,IAAI,MAAM,0BAA0B;AAAA,IAC5C;AAEA,cAAU,EAAE,SAAS,WAAW,CAAC,GAAG;AAAA,MAClC,SAAS;AAAA,IACX,CAAC;AAED,QAAI,QAAQ,SAAS;AACnB,mBAAa,QAAQ;AAAA,IACvB;AAEA,eAAW,SAAS,cAAc;AAChC,eAAS,KAAK;AAAA,IAChB;AAAA,EACF;AACF;",
  "names": []
}
