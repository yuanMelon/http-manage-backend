import type { QueryRawOptions, Sequelize } from '../../sequelize';
import type { Connection } from './connection-manager.js';
import type { AbstractQueryGenerator } from './query-generator';
import type { TableNameOrModel } from './query-generator-typescript.js';
import type { ColumnsDescription, CreateSchemaOptions, DescribeTableOptions, QueryInterfaceOptions, ShowAllSchemasOptions } from './query-interface.types';
export type WithoutForeignKeyChecksCallback<T> = (connection: Connection) => Promise<T>;
/**
 * This is a temporary class used to progressively migrate the AbstractQueryInterface class to TypeScript by slowly moving its functions here.
 * Always use {@link AbstractQueryInterface} instead.
 */
export declare class AbstractQueryInterfaceTypeScript {
    #private;
    readonly sequelize: Sequelize;
    readonly queryGenerator: AbstractQueryGenerator;
    constructor(options: QueryInterfaceOptions);
    /**
     * Create a new database schema.
     *
     * **Note:** We define schemas as a namespace that can contain tables.
     * In mysql and mariadb, this command will create what they call a database.
     *
     * @param schema Name of the schema
     * @param options
     */
    createSchema(schema: string, options?: CreateSchemaOptions): Promise<void>;
    /**
     * Drop a single schema
     *
     * **Note:** We define schemas as a namespace that can contain tables.
     * In mysql and mariadb, this command will create what they call a database.
     *
     * @param schema Name of the schema
     * @param options
     */
    dropSchema(schema: string, options?: QueryRawOptions): Promise<void>;
    /**
     * Show all defined schemas
     *
     * **Note:** this is a schema in the [postgres sense of the word](http://www.postgresql.org/docs/9.1/static/ddl-schemas.html),
     * not a database table. In mysql and mariadb, this will show all databases.
     *
     * @param options
     *
     * @returns list of schemas
     */
    showAllSchemas(options?: ShowAllSchemasOptions): Promise<string[]>;
    /**
     * Describe a table structure
     *
     * This method returns an array of hashes containing information about all attributes in the table.
     *
     * ```js
     * {
     *    name: {
     *      type:         'VARCHAR(255)', // this will be 'CHARACTER VARYING' for pg!
     *      allowNull:    true,
     *      defaultValue: null
     *    },
     *    isBetaMember: {
     *      type:         'TINYINT(1)', // this will be 'BOOLEAN' for pg!
     *      allowNull:    false,
     *      defaultValue: false
     *    }
     * }
     * ```
     *
     * @param tableName
     * @param options Query options
     *
     */
    describeTable(tableName: TableNameOrModel, options?: DescribeTableOptions): Promise<ColumnsDescription>;
    /**
     * Disables foreign key checks for the duration of the callback.
     * The foreign key checks are only disabled for the current connection.
     * To specify the connection, you can either use the "connection" or the "transaction" option.
     * If you do not specify a connection, this method will reserve a connection for the duration of the callback,
     * and release it afterwards. You will receive the connection or transaction as the first argument of the callback.
     * You must use this connection to execute queries
     *
     * @example
     * ```ts
     * await this.queryInterface.withoutForeignKeyChecks(options, async connection => {
     *   const truncateOptions = { ...options, connection };
     *
     *   for (const model of models) {
     *     await model.truncate(truncateOptions);
     *   }
     * });
     * ```
     *
     * @param cb
     */
    withoutForeignKeyChecks<T>(cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;
    withoutForeignKeyChecks<T>(options: QueryRawOptions, cb: WithoutForeignKeyChecksCallback<T>): Promise<T>;
    /**
     * Toggles foreign key checks.
     * Don't forget to turn them back on, use {@link withoutForeignKeyChecks} to do this automatically.
     *
     * @param enable
     * @param options
     */
    unsafeToggleForeignKeyChecks(enable: boolean, options?: QueryRawOptions): Promise<void>;
}
